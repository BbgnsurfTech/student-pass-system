import React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  CommandLineIcon,\n  XMarkIcon,\n  MagnifyingGlassIcon,\n  ArrowRightIcon,\n} from '@heroicons/react/24/outline';\nimport { Dialog } from '@headlessui/react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport { BouncyButton } from '../../common/DelightfulComponents';\n\nexport interface KeyboardShortcut {\n  id: string;\n  keys: string[];\n  description: string;\n  action: () => void;\n  category: string;\n  enabled?: boolean;\n  global?: boolean; // Works even when inputs are focused\n}\n\nexport interface ShortcutCategory {\n  id: string;\n  name: string;\n  shortcuts: KeyboardShortcut[];\n}\n\ninterface KeyboardShortcutsProps {\n  shortcuts: KeyboardShortcut[];\n  onShortcutExecuted?: (shortcut: KeyboardShortcut) => void;\n  className?: string;\n}\n\nconst DEFAULT_SHORTCUTS: KeyboardShortcut[] = [\n  {\n    id: 'search',\n    keys: ['cmd+k', 'ctrl+k'],\n    description: 'Open search',\n    action: () => console.log('Open search'),\n    category: 'navigation',\n    global: true,\n  },\n  {\n    id: 'help',\n    keys: ['?'],\n    description: 'Show keyboard shortcuts',\n    action: () => console.log('Show help'),\n    category: 'general',\n    global: true,\n  },\n  {\n    id: 'dashboard',\n    keys: ['g d'],\n    description: 'Go to dashboard',\n    action: () => console.log('Go to dashboard'),\n    category: 'navigation',\n    global: true,\n  },\n  {\n    id: 'applications',\n    keys: ['g a'],\n    description: 'Go to applications',\n    action: () => console.log('Go to applications'),\n    category: 'navigation',\n    global: true,\n  },\n  {\n    id: 'passes',\n    keys: ['g p'],\n    description: 'Go to passes',\n    action: () => console.log('Go to passes'),\n    category: 'navigation',\n    global: true,\n  },\n  {\n    id: 'new-application',\n    keys: ['n a'],\n    description: 'New application',\n    action: () => console.log('New application'),\n    category: 'actions',\n    global: true,\n  },\n  {\n    id: 'refresh',\n    keys: ['r r'],\n    description: 'Refresh current view',\n    action: () => window.location.reload(),\n    category: 'actions',\n    global: true,\n  },\n];\n\nconst CATEGORY_NAMES: Record<string, string> = {\n  general: 'General',\n  navigation: 'Navigation',\n  actions: 'Actions',\n  editing: 'Editing',\n  forms: 'Forms',\n};\n\nconst formatKeys = (keys: string[]): string => {\n  return keys[0].split(' ').map(key => {\n    const formatted = key\n      .replace('cmd', '⌘')\n      .replace('ctrl', 'Ctrl')\n      .replace('alt', '⌥')\n      .replace('shift', '⇧')\n      .replace('enter', '↵')\n      .replace('escape', 'Esc')\n      .replace('backspace', '⌫')\n      .replace('delete', '⌦')\n      .replace('tab', '⇥')\n      .replace('space', 'Space')\n      .replace('up', '↑')\n      .replace('down', '↓')\n      .replace('left', '←')\n      .replace('right', '→');\n    \n    return formatted;\n  }).join(' ');\n};\n\nexport const KeyboardShortcuts: React.FC<KeyboardShortcutsProps> = ({\n  shortcuts = DEFAULT_SHORTCUTS,\n  onShortcutExecuted,\n  className = '',\n}) => {\n  const [showHelp, setShowHelp] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [pressedKeys, setPressedKeys] = useState<string[]>([]);\n  const [keySequence, setKeySequence] = useState<string[]>([]);\n  const [showKeyIndicator, setShowKeyIndicator] = useState(false);\n  \n  const keyTimeoutRef = useRef<NodeJS.Timeout>();\n  const sequenceTimeoutRef = useRef<NodeJS.Timeout>();\n\n  // Group shortcuts by category\n  const categorizedShortcuts = shortcuts.reduce((acc, shortcut) => {\n    if (!shortcut.enabled === false) {\n      const category = shortcut.category || 'general';\n      if (!acc[category]) {\n        acc[category] = [];\n      }\n      acc[category].push(shortcut);\n    }\n    return acc;\n  }, {} as Record<string, KeyboardShortcut[]>);\n\n  // Filter shortcuts based on search query\n  const filteredShortcuts = searchQuery\n    ? Object.entries(categorizedShortcuts).reduce((acc, [category, categoryShortcuts]) => {\n        const filtered = categoryShortcuts.filter(\n          shortcut =>\n            shortcut.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n            shortcut.keys.some(key => key.toLowerCase().includes(searchQuery.toLowerCase()))\n        );\n        if (filtered.length > 0) {\n          acc[category] = filtered;\n        }\n        return acc;\n      }, {} as Record<string, KeyboardShortcut[]>)\n    : categorizedShortcuts;\n\n  // Register all keyboard shortcuts\n  useEffect(() => {\n    shortcuts.forEach((shortcut) => {\n      if (shortcut.enabled !== false) {\n        shortcut.keys.forEach((key) => {\n          useHotkeys(\n            key,\n            (event) => {\n              event.preventDefault();\n              \n              // Handle help shortcut specially\n              if (shortcut.id === 'help') {\n                setShowHelp(true);\n                return;\n              }\n              \n              shortcut.action();\n              onShortcutExecuted?.(shortcut);\n              \n              // Show visual feedback\n              showShortcutFeedback(shortcut);\n            },\n            {\n              enabled: shortcut.enabled !== false,\n              enableOnFormTags: shortcut.global || false,\n              preventDefault: true,\n            }\n          );\n        });\n      }\n    });\n  }, [shortcuts, onShortcutExecuted]);\n\n  // Show visual feedback when shortcut is executed\n  const showShortcutFeedback = (shortcut: KeyboardShortcut) => {\n    // Create temporary notification\n    const notification = document.createElement('div');\n    notification.className = `\n      fixed top-4 right-4 bg-gray-900 text-white px-4 py-2 rounded-lg shadow-lg z-50\n      transition-all duration-300 transform\n    `;\n    notification.innerHTML = `\n      <div class=\"flex items-center space-x-2\">\n        <div class=\"text-sm font-medium\">${shortcut.description}</div>\n        <div class=\"text-xs opacity-75\">${formatKeys(shortcut.keys)}</div>\n      </div>\n    `;\n    \n    document.body.appendChild(notification);\n    \n    // Animate in\n    requestAnimationFrame(() => {\n      notification.style.transform = 'translateY(0)';\n      notification.style.opacity = '1';\n    });\n    \n    // Remove after delay\n    setTimeout(() => {\n      notification.style.transform = 'translateY(-20px)';\n      notification.style.opacity = '0';\n      setTimeout(() => {\n        document.body.removeChild(notification);\n      }, 300);\n    }, 2000);\n  };\n\n  // Listen for key presses to show indicators\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      const key = event.key.toLowerCase();\n      const modifiers = [];\n      \n      if (event.metaKey) modifiers.push('cmd');\n      if (event.ctrlKey) modifiers.push('ctrl');\n      if (event.altKey) modifiers.push('alt');\n      if (event.shiftKey) modifiers.push('shift');\n      \n      const keyCombo = [...modifiers, key].join('+');\n      \n      setPressedKeys(prev => [...prev, keyCombo]);\n      setShowKeyIndicator(true);\n      \n      // Clear pressed keys after delay\n      if (keyTimeoutRef.current) {\n        clearTimeout(keyTimeoutRef.current);\n      }\n      \n      keyTimeoutRef.current = setTimeout(() => {\n        setPressedKeys([]);\n        setShowKeyIndicator(false);\n      }, 1500);\n    };\n\n    const handleKeyUp = () => {\n      // Reset modifiers when any key is released\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n    \n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n      if (keyTimeoutRef.current) {\n        clearTimeout(keyTimeoutRef.current);\n      }\n      if (sequenceTimeoutRef.current) {\n        clearTimeout(sequenceTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return (\n    <>\n      {/* Key Indicator */}\n      <AnimatePresence>\n        {showKeyIndicator && pressedKeys.length > 0 && (\n          <motion.div\n            className=\"fixed bottom-4 right-4 bg-gray-900 text-white px-4 py-2 rounded-lg shadow-lg z-50\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 20 }}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm\">Keys:</span>\n              <div className=\"flex space-x-1\">\n                {pressedKeys.slice(-3).map((key, index) => (\n                  <span\n                    key={index}\n                    className=\"bg-gray-700 px-2 py-1 rounded text-xs\"\n                  >\n                    {formatKeys([key])}\n                  </span>\n                ))}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Help Dialog */}\n      <AnimatePresence>\n        {showHelp && (\n          <Dialog\n            as={motion.div}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            open={showHelp}\n            onClose={() => setShowHelp(false)}\n            className=\"relative z-50\"\n          >\n            <div className=\"fixed inset-0 bg-black/30\" />\n            \n            <div className=\"fixed inset-0 flex items-center justify-center p-4\">\n              <motion.div\n                className=\"w-full max-w-3xl bg-white rounded-xl shadow-2xl overflow-hidden max-h-[80vh] flex flex-col\"\n                initial={{ opacity: 0, scale: 0.95, y: 20 }}\n                animate={{ opacity: 1, scale: 1, y: 0 }}\n                exit={{ opacity: 0, scale: 0.95, y: 20 }}\n              >\n                {/* Header */}\n                <div className=\"px-6 py-4 border-b border-gray-200 bg-gray-50\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <CommandLineIcon className=\"h-6 w-6 text-gray-600\" />\n                      <div>\n                        <h2 className=\"text-lg font-semibold text-gray-900\">\n                          Keyboard Shortcuts\n                        </h2>\n                        <p className=\"text-sm text-gray-600\">\n                          {shortcuts.filter(s => s.enabled !== false).length} shortcuts available\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <button\n                      onClick={() => setShowHelp(false)}\n                      className=\"text-gray-400 hover:text-gray-600 p-2 rounded-md hover:bg-gray-100\"\n                    >\n                      <XMarkIcon className=\"h-5 w-5\" />\n                    </button>\n                  </div>\n                  \n                  {/* Search */}\n                  <div className=\"mt-4 relative\">\n                    <MagnifyingGlassIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      placeholder=\"Search shortcuts...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n                      autoFocus\n                    />\n                  </div>\n                </div>\n\n                {/* Shortcuts List */}\n                <div className=\"flex-1 overflow-y-auto p-6\">\n                  {Object.keys(filteredShortcuts).length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <CommandLineIcon className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                      <p className=\"text-gray-600\">No shortcuts found</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-6\">\n                      {Object.entries(filteredShortcuts).map(([category, categoryShortcuts]) => (\n                        <motion.div\n                          key={category}\n                          initial={{ opacity: 0, y: 20 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          <h3 className=\"text-sm font-semibold text-gray-900 mb-3 uppercase tracking-wide\">\n                            {CATEGORY_NAMES[category] || category}\n                          </h3>\n                          \n                          <div className=\"space-y-2\">\n                            {categoryShortcuts.map((shortcut, index) => (\n                              <motion.div\n                                key={shortcut.id}\n                                className=\"flex items-center justify-between p-3 rounded-lg border border-gray-200 hover:bg-gray-50 group\"\n                                initial={{ opacity: 0, x: -20 }}\n                                animate={{ opacity: 1, x: 0 }}\n                                transition={{ delay: index * 0.05 }}\n                                whileHover={{ scale: 1.01 }}\n                              >\n                                <div className=\"flex-1\">\n                                  <div className=\"text-sm font-medium text-gray-900\">\n                                    {shortcut.description}\n                                  </div>\n                                </div>\n                                \n                                <div className=\"flex items-center space-x-2\">\n                                  <div className=\"flex space-x-1\">\n                                    {formatKeys(shortcut.keys).split(' ').map((key, keyIndex) => (\n                                      <kbd\n                                        key={keyIndex}\n                                        className=\"px-2 py-1 bg-gray-100 border border-gray-300 rounded text-xs font-mono text-gray-800 group-hover:bg-gray-200\"\n                                      >\n                                        {key}\n                                      </kbd>\n                                    ))}\n                                  </div>\n                                  \n                                  <BouncyButton\n                                    onClick={() => {\n                                      shortcut.action();\n                                      onShortcutExecuted?.(shortcut);\n                                      showShortcutFeedback(shortcut);\n                                    }}\n                                    className=\"p-1 text-gray-400 hover:text-gray-600 opacity-0 group-hover:opacity-100 transition-opacity\"\n                                  >\n                                    <ArrowRightIcon className=\"h-4 w-4\" />\n                                  </BouncyButton>\n                                </div>\n                              </motion.div>\n                            ))}\n                          </div>\n                        </motion.div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                {/* Footer */}\n                <div className=\"px-6 py-4 border-t border-gray-200 bg-gray-50\">\n                  <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-1\">\n                        <kbd className=\"px-2 py-1 bg-white border border-gray-300 rounded text-xs\">?</kbd>\n                        <span>Show this help</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <kbd className=\"px-2 py-1 bg-white border border-gray-300 rounded text-xs\">Esc</kbd>\n                        <span>Close</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-xs text-gray-500\">\n                      Press any shortcut to execute it\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            </div>\n          </Dialog>\n        )}\n      </AnimatePresence>\n    </>\n  );\n};\n\n// Hook to use keyboard shortcuts\nexport const useKeyboardShortcuts = (shortcuts: KeyboardShortcut[]) => {\n  useEffect(() => {\n    shortcuts.forEach((shortcut) => {\n      if (shortcut.enabled !== false) {\n        shortcut.keys.forEach((key) => {\n          useHotkeys(\n            key,\n            (event) => {\n              event.preventDefault();\n              shortcut.action();\n            },\n            {\n              enabled: shortcut.enabled !== false,\n              enableOnFormTags: shortcut.global || false,\n              preventDefault: true,\n            }\n          );\n        });\n      }\n    });\n  }, [shortcuts]);\n};\n\n// Context for keyboard shortcuts\nexport const KeyboardShortcutsContext = React.createContext<{\n  shortcuts: KeyboardShortcut[];\n  addShortcut: (shortcut: KeyboardShortcut) => void;\n  removeShortcut: (id: string) => void;\n  enableShortcut: (id: string, enabled: boolean) => void;\n}>({ \n  shortcuts: [], \n  addShortcut: () => {}, \n  removeShortcut: () => {}, \n  enableShortcut: () => {} \n});\n\nexport const KeyboardShortcutsProvider: React.FC<{\n  children: React.ReactNode;\n  initialShortcuts?: KeyboardShortcut[];\n}> = ({ children, initialShortcuts = DEFAULT_SHORTCUTS }) => {\n  const [shortcuts, setShortcuts] = useState<KeyboardShortcut[]>(initialShortcuts);\n\n  const addShortcut = (shortcut: KeyboardShortcut) => {\n    setShortcuts(prev => [...prev.filter(s => s.id !== shortcut.id), shortcut]);\n  };\n\n  const removeShortcut = (id: string) => {\n    setShortcuts(prev => prev.filter(s => s.id !== id));\n  };\n\n  const enableShortcut = (id: string, enabled: boolean) => {\n    setShortcuts(prev => \n      prev.map(s => s.id === id ? { ...s, enabled } : s)\n    );\n  };\n\n  return (\n    <KeyboardShortcutsContext.Provider value={{\n      shortcuts,\n      addShortcut,\n      removeShortcut,\n      enableShortcut,\n    }}>\n      <KeyboardShortcuts shortcuts={shortcuts} />\n      {children}\n    </KeyboardShortcutsContext.Provider>\n  );\n};