import React, { useState, useCallback, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useForm, FormProvider, UseFormReturn, FieldValues, Path } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  CheckIcon,\n  ExclamationTriangleIcon,\n  ClockIcon,\n  BookmarkIcon,\n} from '@heroicons/react/24/outline';\nimport { BouncyButton, PlayfulLoader } from '../../common/DelightfulComponents';\nimport debounce from 'lodash.debounce';\n\nexport interface FormStep<T extends FieldValues = any> {\n  id: string;\n  title: string;\n  description?: string;\n  icon?: React.ElementType;\n  schema: z.ZodSchema;\n  component: React.ComponentType<{\n    formMethods: UseFormReturn<T>;\n    onNext?: () => void;\n    onPrevious?: () => void;\n    isLoading?: boolean;\n  }>;\n  optional?: boolean;\n  validation?: 'onSubmit' | 'onChange' | 'onBlur';\n}\n\ninterface MultiStepFormProps<T extends FieldValues> {\n  steps: FormStep<T>[];\n  onSubmit: (data: T) => Promise<void> | void;\n  onStepChange?: (currentStep: number, totalSteps: number) => void;\n  onSave?: (data: Partial<T>, currentStep: number) => Promise<void> | void;\n  initialData?: Partial<T>;\n  autoSave?: boolean;\n  autoSaveInterval?: number; // in milliseconds\n  showProgress?: boolean;\n  allowSkipOptional?: boolean;\n  confirmBeforeExit?: boolean;\n  className?: string;\n}\n\ninterface SavedProgress<T> {\n  data: Partial<T>;\n  currentStep: number;\n  timestamp: Date;\n  completedSteps: Set<number>;\n}\n\nconst STORAGE_KEY = 'multiStepFormProgress';\n\nexport function MultiStepForm<T extends FieldValues>({\n  steps,\n  onSubmit,\n  onStepChange,\n  onSave,\n  initialData = {},\n  autoSave = true,\n  autoSaveInterval = 30000, // 30 seconds\n  showProgress = true,\n  allowSkipOptional = true,\n  confirmBeforeExit = true,\n  className = '',\n}: MultiStepFormProps<T>) {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [completedSteps, setCompletedSteps] = useState<Set<number>>(new Set());\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n\n  // Combined schema for all steps\n  const combinedSchema = z.object(\n    steps.reduce((acc, step) => {\n      const stepShape = step.schema.shape || step.schema._def.shape();\n      return { ...acc, ...stepShape };\n    }, {})\n  );\n\n  const methods = useForm<T>({\n    resolver: zodResolver(combinedSchema),\n    defaultValues: initialData,\n    mode: 'onChange',\n  });\n\n  const { watch, trigger, getValues, setValue, formState: { errors, isValid } } = methods;\n  const watchedValues = watch();\n\n  // Load saved progress\n  useEffect(() => {\n    const savedProgress = localStorage.getItem(STORAGE_KEY);\n    if (savedProgress) {\n      try {\n        const progress: SavedProgress<T> = JSON.parse(savedProgress);\n        if (progress.data) {\n          Object.entries(progress.data).forEach(([key, value]) => {\n            setValue(key as Path<T>, value);\n          });\n          setCurrentStep(progress.currentStep);\n          setCompletedSteps(new Set(progress.completedSteps));\n          setLastSaved(new Date(progress.timestamp));\n        }\n      } catch (error) {\n        console.error('Failed to load saved progress:', error);\n      }\n    }\n  }, [setValue]);\n\n  // Auto-save functionality\n  const saveProgress = useCallback(\n    debounce(async () => {\n      if (!autoSave) return;\n      \n      setIsSaving(true);\n      try {\n        const data = getValues();\n        \n        // Save to localStorage\n        const progress: SavedProgress<T> = {\n          data,\n          currentStep,\n          timestamp: new Date(),\n          completedSteps,\n        };\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(progress));\n        \n        // Call external save function if provided\n        if (onSave) {\n          await onSave(data, currentStep);\n        }\n        \n        setLastSaved(new Date());\n        setHasUnsavedChanges(false);\n      } catch (error) {\n        console.error('Auto-save failed:', error);\n      } finally {\n        setIsSaving(false);\n      }\n    }, 1000),\n    [autoSave, currentStep, completedSteps, getValues, onSave]\n  );\n\n  // Watch for changes and trigger auto-save\n  useEffect(() => {\n    setHasUnsavedChanges(true);\n    saveProgress();\n  }, [watchedValues, saveProgress]);\n\n  // Auto-save interval\n  useEffect(() => {\n    if (!autoSave) return;\n    \n    const interval = setInterval(() => {\n      if (hasUnsavedChanges) {\n        saveProgress();\n      }\n    }, autoSaveInterval);\n\n    return () => clearInterval(interval);\n  }, [autoSave, autoSaveInterval, hasUnsavedChanges, saveProgress]);\n\n  // Warn before leaving page with unsaved changes\n  useEffect(() => {\n    if (!confirmBeforeExit) return;\n    \n    const handleBeforeUnload = (e: BeforeUnloadEvent) => {\n      if (hasUnsavedChanges) {\n        e.preventDefault();\n        e.returnValue = '';\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n  }, [hasUnsavedChanges, confirmBeforeExit]);\n\n  const currentStepConfig = steps[currentStep];\n  const isLastStep = currentStep === steps.length - 1;\n  const isFirstStep = currentStep === 0;\n\n  const validateCurrentStep = async (): Promise<boolean> => {\n    const stepSchema = currentStepConfig.schema;\n    const currentData = getValues();\n    \n    try {\n      await stepSchema.parseAsync(currentData);\n      return true;\n    } catch (error) {\n      // Trigger validation to show errors\n      await trigger();\n      return false;\n    }\n  };\n\n  const goToStep = async (stepIndex: number) => {\n    if (stepIndex === currentStep) return;\n    \n    // Validate current step before moving\n    if (stepIndex > currentStep) {\n      const isValid = await validateCurrentStep();\n      if (!isValid && !currentStepConfig.optional) {\n        return;\n      }\n      \n      // Mark current step as completed\n      setCompletedSteps(prev => new Set([...prev, currentStep]));\n    }\n    \n    setCurrentStep(stepIndex);\n    onStepChange?.(stepIndex, steps.length);\n  };\n\n  const handleNext = async () => {\n    if (isLastStep) {\n      await handleSubmit();\n    } else {\n      await goToStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (!isFirstStep) {\n      goToStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    \n    try {\n      // Validate all steps\n      const isValid = await trigger();\n      if (!isValid) {\n        // Find first step with errors\n        const firstStepWithError = steps.findIndex((step, index) => {\n          const stepKeys = Object.keys(step.schema.shape || step.schema._def.shape());\n          return stepKeys.some(key => errors[key as keyof typeof errors]);\n        });\n        \n        if (firstStepWithError !== -1) {\n          setCurrentStep(firstStepWithError);\n        }\n        return;\n      }\n      \n      const data = getValues();\n      await onSubmit(data);\n      \n      // Clear saved progress after successful submission\n      localStorage.removeItem(STORAGE_KEY);\n      setHasUnsavedChanges(false);\n      \n    } catch (error) {\n      console.error('Form submission failed:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const getStepStatus = (stepIndex: number) => {\n    if (completedSteps.has(stepIndex)) return 'completed';\n    if (stepIndex === currentStep) return 'current';\n    if (stepIndex < currentStep) return 'completed';\n    return 'upcoming';\n  };\n\n  const canSkipStep = (stepIndex: number) => {\n    return allowSkipOptional && steps[stepIndex].optional;\n  };\n\n  return (\n    <FormProvider {...methods}>\n      <div className={`max-w-4xl mx-auto ${className}`}>\n        {/* Progress Indicator */}\n        {showProgress && (\n          <motion.div\n            className=\"mb-8\"\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">\n                Step {currentStep + 1} of {steps.length}: {currentStepConfig.title}\n              </h2>\n              \n              {/* Save Status */}\n              <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                {isSaving && (\n                  <div className=\"flex items-center space-x-2\">\n                    <PlayfulLoader size=\"sm\" />\n                    <span>Saving...</span>\n                  </div>\n                )}\n                \n                {lastSaved && !isSaving && (\n                  <div className=\"flex items-center space-x-2\">\n                    <BookmarkIcon className=\"h-4 w-4\" />\n                    <span>Last saved: {lastSaved.toLocaleTimeString()}</span>\n                  </div>\n                )}\n                \n                {hasUnsavedChanges && !isSaving && (\n                  <div className=\"flex items-center space-x-2 text-amber-600\">\n                    <ClockIcon className=\"h-4 w-4\" />\n                    <span>Unsaved changes</span>\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            {/* Step Indicator */}\n            <div className=\"flex items-center space-x-4\">\n              {steps.map((step, index) => {\n                const status = getStepStatus(index);\n                const Icon = step.icon;\n                \n                return (\n                  <React.Fragment key={step.id}>\n                    <motion.button\n                      onClick={() => goToStep(index)}\n                      disabled={index > currentStep && !canSkipStep(index)}\n                      className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-all ${\n                        status === 'completed'\n                          ? 'bg-green-100 text-green-700 border border-green-300'\n                          : status === 'current'\n                          ? 'bg-primary-100 text-primary-700 border border-primary-300'\n                          : 'bg-gray-100 text-gray-500 border border-gray-300'\n                      } ${\n                        index <= currentStep || canSkipStep(index)\n                          ? 'hover:shadow-md cursor-pointer'\n                          : 'cursor-not-allowed opacity-60'\n                      }`}\n                      whileHover={index <= currentStep || canSkipStep(index) ? { scale: 1.02 } : {}}\n                      whileTap={index <= currentStep || canSkipStep(index) ? { scale: 0.98 } : {}}\n                    >\n                      <div className={`flex items-center justify-center w-6 h-6 rounded-full ${\n                        status === 'completed' ? 'bg-green-500' : 'bg-transparent'\n                      }`}>\n                        {status === 'completed' ? (\n                          <CheckIcon className=\"h-4 w-4 text-white\" />\n                        ) : Icon ? (\n                          <Icon className=\"h-4 w-4\" />\n                        ) : (\n                          <span className=\"text-xs font-medium\">{index + 1}</span>\n                        )}\n                      </div>\n                      \n                      <div className=\"text-left\">\n                        <div className=\"text-sm font-medium\">{step.title}</div>\n                        {step.optional && (\n                          <div className=\"text-xs opacity-75\">Optional</div>\n                        )}\n                      </div>\n                    </motion.button>\n                    \n                    {index < steps.length - 1 && (\n                      <div className={`w-8 h-0.5 ${\n                        completedSteps.has(index) ? 'bg-green-300' : 'bg-gray-300'\n                      }`} />\n                    )}\n                  </React.Fragment>\n                );\n              })}\n            </div>\n            \n            {/* Progress Bar */}\n            <div className=\"mt-4\">\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <motion.div\n                  className=\"bg-primary-500 h-2 rounded-full\"\n                  initial={{ width: 0 }}\n                  animate={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}\n                  transition={{ duration: 0.5 }}\n                />\n              </div>\n              <div className=\"flex justify-between text-xs text-gray-600 mt-1\">\n                <span>Progress</span>\n                <span>{Math.round(((currentStep + 1) / steps.length) * 100)}% Complete</span>\n              </div>\n            </div>\n          </motion.div>\n        )}\n\n        {/* Step Content */}\n        <motion.div\n          className=\"bg-white rounded-lg shadow-sm border border-gray-200 min-h-[500px]\"\n          initial={{ opacity: 0, x: 50 }}\n          animate={{ opacity: 1, x: 0 }}\n          key={currentStep}\n          transition={{ duration: 0.3 }}\n        >\n          <div className=\"p-6\">\n            {/* Step Header */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                {currentStepConfig.title}\n              </h3>\n              {currentStepConfig.description && (\n                <p className=\"text-gray-600\">{currentStepConfig.description}</p>\n              )}\n              \n              {/* Step Errors Summary */}\n              {Object.keys(errors).length > 0 && (\n                <motion.div\n                  className=\"mt-4 p-4 bg-red-50 border border-red-200 rounded-lg\"\n                  initial={{ opacity: 0, height: 0 }}\n                  animate={{ opacity: 1, height: 'auto' }}\n                >\n                  <div className=\"flex items-start space-x-2\">\n                    <ExclamationTriangleIcon className=\"h-5 w-5 text-red-500 flex-shrink-0 mt-0.5\" />\n                    <div>\n                      <p className=\"text-sm font-medium text-red-700\">Please fix the following errors:</p>\n                      <ul className=\"text-sm text-red-600 mt-1 space-y-1\">\n                        {Object.entries(errors).map(([field, error]) => (\n                          <li key={field}>• {error?.message}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n            </div>\n\n            {/* Step Component */}\n            <currentStepConfig.component\n              formMethods={methods}\n              onNext={handleNext}\n              onPrevious={handlePrevious}\n              isLoading={isSubmitting}\n            />\n          </div>\n\n          {/* Navigation */}\n          <div className=\"px-6 py-4 border-t border-gray-200 bg-gray-50 rounded-b-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                {!isFirstStep && (\n                  <BouncyButton\n                    onClick={handlePrevious}\n                    className=\"flex items-center space-x-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50\"\n                    disabled={isSubmitting}\n                  >\n                    <ChevronLeftIcon className=\"h-4 w-4\" />\n                    <span>Previous</span>\n                  </BouncyButton>\n                )}\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                {currentStepConfig.optional && !isLastStep && (\n                  <BouncyButton\n                    onClick={() => goToStep(currentStep + 1)}\n                    className=\"px-4 py-2 text-gray-600 hover:text-gray-800\"\n                    disabled={isSubmitting}\n                  >\n                    Skip\n                  </BouncyButton>\n                )}\n                \n                <BouncyButton\n                  onClick={handleNext}\n                  disabled={isSubmitting}\n                  className=\"btn-primary flex items-center space-x-2\"\n                >\n                  {isSubmitting ? (\n                    <PlayfulLoader size=\"sm\" message=\"\" />\n                  ) : (\n                    <>\n                      <span>{isLastStep ? 'Submit' : 'Next'}</span>\n                      {!isLastStep && <ChevronRightIcon className=\"h-4 w-4\" />}\n                    </>\n                  )}\n                </BouncyButton>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </FormProvider>\n  );\n}