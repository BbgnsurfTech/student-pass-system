import React, { useState, useCallback, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  CloudArrowUpIcon,\n  DocumentIcon,\n  PhotoIcon,\n  XMarkIcon,\n  EyeIcon,\n  ArrowDownTrayIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  ArrowPathIcon,\n} from '@heroicons/react/24/outline';\nimport { BouncyButton, PlayfulLoader } from '../../common/DelightfulComponents';\n\nexport interface FileUploadOptions {\n  maxSize: number; // in bytes\n  maxFiles: number;\n  acceptedTypes: string[];\n  allowMultiple: boolean;\n}\n\nexport interface UploadedFile {\n  id: string;\n  file: File;\n  name: string;\n  size: number;\n  type: string;\n  url?: string;\n  uploadProgress?: number;\n  uploadStatus?: 'pending' | 'uploading' | 'success' | 'error';\n  error?: string;\n  preview?: string;\n}\n\ninterface FileUploadZoneProps {\n  options: FileUploadOptions;\n  onFilesChange: (files: UploadedFile[]) => void;\n  onUpload?: (files: UploadedFile[]) => Promise<void>;\n  initialFiles?: UploadedFile[];\n  disabled?: boolean;\n  className?: string;\n  uploadText?: string;\n  description?: string;\n}\n\nconst formatFileSize = (bytes: number): string => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\nconst getFileTypeIcon = (type: string) => {\n  if (type.startsWith('image/')) return PhotoIcon;\n  return DocumentIcon;\n};\n\nconst generateFileId = () => Math.random().toString(36).substr(2, 9);\n\nexport const FileUploadZone: React.FC<FileUploadZoneProps> = ({\n  options,\n  onFilesChange,\n  onUpload,\n  initialFiles = [],\n  disabled = false,\n  className = '',\n  uploadText = 'Click to upload or drag and drop',\n  description = 'Upload files here',\n}) => {\n  const [files, setFiles] = useState<UploadedFile[]>(initialFiles);\n  const [dragActive, setDragActive] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const validateFile = (file: File): string | null => {\n    if (file.size > options.maxSize) {\n      return `File size exceeds ${formatFileSize(options.maxSize)}`;\n    }\n    \n    if (options.acceptedTypes.length > 0) {\n      const isValidType = options.acceptedTypes.some(type => {\n        if (type.startsWith('.')) {\n          return file.name.toLowerCase().endsWith(type.toLowerCase());\n        }\n        return file.type.match(type.replace('*', '.*'));\n      });\n      \n      if (!isValidType) {\n        return `File type not allowed. Accepted types: ${options.acceptedTypes.join(', ')}`;\n      }\n    }\n    \n    return null;\n  };\n\n  const createFilePreview = (file: File): Promise<string | undefined> => {\n    return new Promise((resolve) => {\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = (e) => resolve(e.target?.result as string);\n        reader.readAsDataURL(file);\n      } else {\n        resolve(undefined);\n      }\n    });\n  };\n\n  const processFiles = useCallback(async (fileList: FileList) => {\n    const newFiles: UploadedFile[] = [];\n    \n    for (let i = 0; i < fileList.length; i++) {\n      const file = fileList[i];\n      const error = validateFile(file);\n      const preview = await createFilePreview(file);\n      \n      const uploadedFile: UploadedFile = {\n        id: generateFileId(),\n        file,\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        uploadStatus: error ? 'error' : 'pending',\n        error,\n        preview,\n      };\n      \n      newFiles.push(uploadedFile);\n      \n      // Stop if we've reached the max file limit\n      if (!options.allowMultiple || files.length + newFiles.length >= options.maxFiles) {\n        break;\n      }\n    }\n    \n    const updatedFiles = options.allowMultiple \n      ? [...files, ...newFiles].slice(0, options.maxFiles)\n      : newFiles.slice(0, 1);\n    \n    setFiles(updatedFiles);\n    onFilesChange(updatedFiles);\n  }, [files, options, onFilesChange]);\n\n  const handleDrag = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }, []);\n\n  const handleDragIn = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n      setDragActive(true);\n    }\n  }, []);\n\n  const handleDragOut = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (disabled) return;\n    \n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      processFiles(e.dataTransfer.files);\n    }\n  }, [disabled, processFiles]);\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      processFiles(e.target.files);\n    }\n    // Reset input value to allow re-selecting the same file\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const removeFile = (fileId: string) => {\n    const updatedFiles = files.filter(file => file.id !== fileId);\n    setFiles(updatedFiles);\n    onFilesChange(updatedFiles);\n  };\n\n  const retryUpload = async (fileId: string) => {\n    if (!onUpload) return;\n    \n    const updatedFiles = files.map(file => \n      file.id === fileId \n        ? { ...file, uploadStatus: 'uploading' as const, error: undefined }\n        : file\n    );\n    \n    setFiles(updatedFiles);\n    \n    try {\n      const fileToRetry = updatedFiles.find(f => f.id === fileId);\n      if (fileToRetry) {\n        await onUpload([fileToRetry]);\n        \n        setFiles(prev => prev.map(file => \n          file.id === fileId \n            ? { ...file, uploadStatus: 'success' as const }\n            : file\n        ));\n      }\n    } catch (error) {\n      setFiles(prev => prev.map(file => \n        file.id === fileId \n          ? { ...file, uploadStatus: 'error' as const, error: 'Upload failed' }\n          : file\n      ));\n    }\n  };\n\n  const uploadAllFiles = async () => {\n    if (!onUpload || files.length === 0) return;\n    \n    setIsUploading(true);\n    \n    try {\n      const pendingFiles = files.filter(file => \n        file.uploadStatus === 'pending' || file.uploadStatus === 'error'\n      );\n      \n      if (pendingFiles.length === 0) return;\n      \n      // Update status to uploading\n      setFiles(prev => prev.map(file => \n        pendingFiles.some(pf => pf.id === file.id)\n          ? { ...file, uploadStatus: 'uploading' as const, error: undefined }\n          : file\n      ));\n      \n      await onUpload(pendingFiles);\n      \n      // Update status to success\n      setFiles(prev => prev.map(file => \n        pendingFiles.some(pf => pf.id === file.id)\n          ? { ...file, uploadStatus: 'success' as const }\n          : file\n      ));\n      \n    } catch (error) {\n      setFiles(prev => prev.map(file => \n        files.some(pf => pf.id === file.id)\n          ? { ...file, uploadStatus: 'error' as const, error: 'Upload failed' }\n          : file\n      ));\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const openFileDialog = () => {\n    if (disabled) return;\n    fileInputRef.current?.click();\n  };\n\n  const getAcceptString = () => {\n    return options.acceptedTypes.join(',');\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Upload Zone */}\n      <motion.div\n        className={`relative border-2 border-dashed rounded-lg p-6 transition-all duration-200 ${\n          dragActive\n            ? 'border-primary-500 bg-primary-50'\n            : disabled\n            ? 'border-gray-200 bg-gray-50 cursor-not-allowed'\n            : 'border-gray-300 bg-gray-50 hover:border-primary-400 hover:bg-primary-50 cursor-pointer'\n        }`}\n        onDragEnter={handleDragIn}\n        onDragLeave={handleDragOut}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n        onClick={openFileDialog}\n        whileHover={!disabled ? { scale: 1.01 } : {}}\n        whileTap={!disabled ? { scale: 0.99 } : {}}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple={options.allowMultiple}\n          accept={getAcceptString()}\n          onChange={handleFileInputChange}\n          disabled={disabled}\n          className=\"hidden\"\n        />\n        \n        <div className=\"text-center\">\n          <motion.div\n            animate={dragActive ? { scale: 1.1, rotate: 5 } : { scale: 1, rotate: 0 }}\n            transition={{ duration: 0.2 }}\n          >\n            <CloudArrowUpIcon className={`mx-auto h-12 w-12 ${\n              dragActive ? 'text-primary-500' : 'text-gray-400'\n            }`} />\n          </motion.div>\n          \n          <div className=\"mt-4\">\n            <p className={`text-sm font-medium ${\n              dragActive ? 'text-primary-600' : 'text-gray-900'\n            }`}>\n              {uploadText}\n            </p>\n            <p className=\"text-xs text-gray-600 mt-1\">{description}</p>\n            \n            <div className=\"mt-2 text-xs text-gray-500 space-y-1\">\n              <p>Max file size: {formatFileSize(options.maxSize)}</p>\n              <p>Max files: {options.maxFiles}</p>\n              {options.acceptedTypes.length > 0 && (\n                <p>Accepted types: {options.acceptedTypes.join(', ')}</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* File List */}\n      <AnimatePresence>\n        {files.length > 0 && (\n          <motion.div\n            className=\"space-y-2\"\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n          >\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"text-sm font-medium text-gray-900\">\n                Files ({files.length}/{options.maxFiles})\n              </h4>\n              \n              {onUpload && files.some(f => f.uploadStatus === 'pending' || f.uploadStatus === 'error') && (\n                <BouncyButton\n                  onClick={uploadAllFiles}\n                  disabled={isUploading}\n                  className=\"text-sm btn-primary px-3 py-1 flex items-center space-x-1\"\n                >\n                  {isUploading ? (\n                    <PlayfulLoader size=\"sm\" message=\"\" />\n                  ) : (\n                    <>\n                      <CloudArrowUpIcon className=\"h-4 w-4\" />\n                      <span>Upload All</span>\n                    </>\n                  )}\n                </BouncyButton>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              {files.map((file, index) => {\n                const FileIcon = getFileTypeIcon(file.type);\n                \n                return (\n                  <motion.div\n                    key={file.id}\n                    className=\"flex items-center space-x-3 p-3 bg-white border border-gray-200 rounded-lg\"\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: 20 }}\n                    transition={{ delay: index * 0.1 }}\n                  >\n                    {/* File Preview/Icon */}\n                    <div className=\"flex-shrink-0\">\n                      {file.preview ? (\n                        <img\n                          src={file.preview}\n                          alt={file.name}\n                          className=\"w-12 h-12 rounded object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-12 h-12 bg-gray-100 rounded flex items-center justify-center\">\n                          <FileIcon className=\"h-6 w-6 text-gray-500\" />\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* File Info */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center space-x-2\">\n                        <p className=\"text-sm font-medium text-gray-900 truncate\">\n                          {file.name}\n                        </p>\n                        \n                        {/* Status Icon */}\n                        {file.uploadStatus === 'success' && (\n                          <CheckCircleIcon className=\"h-4 w-4 text-green-500 flex-shrink-0\" />\n                        )}\n                        {file.uploadStatus === 'error' && (\n                          <ExclamationTriangleIcon className=\"h-4 w-4 text-red-500 flex-shrink-0\" />\n                        )}\n                        {file.uploadStatus === 'uploading' && (\n                          <motion.div\n                            animate={{ rotate: 360 }}\n                            transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                          >\n                            <ArrowPathIcon className=\"h-4 w-4 text-blue-500\" />\n                          </motion.div>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-4 mt-1\">\n                        <p className=\"text-xs text-gray-500\">{formatFileSize(file.size)}</p>\n                        \n                        {file.error && (\n                          <p className=\"text-xs text-red-600\">{file.error}</p>\n                        )}\n                        \n                        {file.uploadProgress !== undefined && file.uploadStatus === 'uploading' && (\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-20 bg-gray-200 rounded-full h-1\">\n                              <div \n                                className=\"bg-blue-500 h-1 rounded-full transition-all duration-300\"\n                                style={{ width: `${file.uploadProgress}%` }}\n                              />\n                            </div>\n                            <span className=\"text-xs text-gray-600\">{file.uploadProgress}%</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    \n                    {/* Actions */}\n                    <div className=\"flex items-center space-x-2\">\n                      {file.preview && (\n                        <button\n                          className=\"p-1 text-gray-400 hover:text-gray-600 rounded\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            // Open preview modal - implement as needed\n                          }}\n                        >\n                          <EyeIcon className=\"h-4 w-4\" />\n                        </button>\n                      )}\n                      \n                      {file.url && (\n                        <a\n                          href={file.url}\n                          download={file.name}\n                          className=\"p-1 text-gray-400 hover:text-gray-600 rounded\"\n                          onClick={(e) => e.stopPropagation()}\n                        >\n                          <ArrowDownTrayIcon className=\"h-4 w-4\" />\n                        </a>\n                      )}\n                      \n                      {file.uploadStatus === 'error' && (\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            retryUpload(file.id);\n                          }}\n                          className=\"p-1 text-blue-500 hover:text-blue-600 rounded\"\n                        >\n                          <ArrowPathIcon className=\"h-4 w-4\" />\n                        </button>\n                      )}\n                      \n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          removeFile(file.id);\n                        }}\n                        className=\"p-1 text-red-400 hover:text-red-600 rounded\"\n                      >\n                        <XMarkIcon className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  </motion.div>\n                );\n              })}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};