import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  ChartOptions,
  ChartData,
} from 'chart.js';
import { Line, Bar, Doughnut, Pie } from 'react-chartjs-2';
import { format, subDays, startOfDay, endOfDay } from 'date-fns';
import {
  CalendarDaysIcon,
  FunnelIcon,
  ArrowDownTrayIcon,
  ArrowsPointingOutIcon,
  PhotoIcon,
  DocumentTextIcon,
} from '@heroicons/react/24/outline';
import { Menu } from '@headlessui/react';
import { BouncyButton } from '../../common/DelightfulComponents';

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend
);\n\nexport type ChartType = 'line' | 'bar' | 'doughnut' | 'pie';\n\nexport interface ChartDataPoint {\n  label: string;\n  value: number;\n  color?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface TimeSeriesData {\n  date: Date;\n  value: number;\n  series?: string;\n}\n\nexport interface InteractiveChartProps {\n  title: string;\n  type: ChartType;\n  data: ChartDataPoint[] | TimeSeriesData[];\n  loading?: boolean;\n  height?: number;\n  showLegend?: boolean;\n  showGrid?: boolean;\n  showTooltips?: boolean;\n  enableZoom?: boolean;\n  enableExport?: boolean;\n  timeRange?: '7d' | '30d' | '90d' | '1y';\n  onTimeRangeChange?: (range: string) => void;\n  onDataPointClick?: (dataPoint: any, index: number) => void;\n  customOptions?: Partial<ChartOptions>;\n  className?: string;\n}\n\nconst TIME_RANGES = [\n  { value: '7d', label: '7 Days' },\n  { value: '30d', label: '30 Days' },\n  { value: '90d', label: '90 Days' },\n  { value: '1y', label: '1 Year' },\n];\n\nconst DEFAULT_COLORS = [\n  '#3b82f6', // blue\n  '#10b981', // green\n  '#f59e0b', // yellow\n  '#ef4444', // red\n  '#8b5cf6', // purple\n  '#06b6d4', // cyan\n  '#f97316', // orange\n  '#84cc16', // lime\n];\n\nexport const InteractiveChart: React.FC<InteractiveChartProps> = ({\n  title,\n  type,\n  data,\n  loading = false,\n  height = 300,\n  showLegend = true,\n  showGrid = true,\n  showTooltips = true,\n  enableZoom = false,\n  enableExport = true,\n  timeRange = '30d',\n  onTimeRangeChange,\n  onDataPointClick,\n  customOptions = {},\n  className = '',\n}) => {\n  const chartRef = useRef<any>(null);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [selectedDataPoints, setSelectedDataPoints] = useState<number[]>([]);\n\n  // Process data based on chart type\n  const processedData = React.useMemo(() => {\n    if (loading) return { labels: [], datasets: [] };\n\n    if (type === 'line' && data.length > 0 && 'date' in data[0]) {\n      const timeSeriesData = data as TimeSeriesData[];\n      const groupedBySeries = timeSeriesData.reduce((acc, item) => {\n        const series = item.series || 'default';\n        if (!acc[series]) acc[series] = [];\n        acc[series].push(item);\n        return acc;\n      }, {} as Record<string, TimeSeriesData[]>);\n\n      const labels = timeSeriesData.map(item => \n        format(item.date, 'MMM dd')\n      );\n\n      const datasets = Object.entries(groupedBySeries).map(([series, seriesData], index) => ({\n        label: series,\n        data: seriesData.map(item => item.value),\n        borderColor: DEFAULT_COLORS[index % DEFAULT_COLORS.length],\n        backgroundColor: `${DEFAULT_COLORS[index % DEFAULT_COLORS.length]}20`,\n        borderWidth: 2,\n        fill: true,\n        tension: 0.4,\n      }));\n\n      return { labels: [...new Set(labels)], datasets };\n    }\n\n    // For bar, doughnut, pie charts\n    const chartData = data as ChartDataPoint[];\n    const labels = chartData.map(item => item.label);\n    const values = chartData.map(item => item.value);\n    const colors = chartData.map((item, index) => \n      item.color || DEFAULT_COLORS[index % DEFAULT_COLORS.length]\n    );\n\n    const dataset = {\n      label: title,\n      data: values,\n      backgroundColor: colors,\n      borderColor: colors.map(color => color + 'CC'),\n      borderWidth: 1,\n    };\n\n    return {\n      labels,\n      datasets: [dataset],\n    };\n  }, [data, type, loading, title]);\n\n  // Chart options\n  const options: ChartOptions = React.useMemo(() => ({\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: showLegend,\n        position: 'top' as const,\n      },\n      tooltip: {\n        enabled: showTooltips,\n        callbacks: {\n          title: (tooltipItems) => {\n            return tooltipItems[0]?.label || '';\n          },\n          label: (tooltipItem) => {\n            const value = tooltipItem.parsed.y ?? tooltipItem.parsed;\n            const formatted = new Intl.NumberFormat().format(value);\n            return `${tooltipItem.dataset.label}: ${formatted}`;\n          },\n        },\n      },\n    },\n    scales: (type === 'line' || type === 'bar') ? {\n      x: {\n        grid: {\n          display: showGrid,\n        },\n      },\n      y: {\n        grid: {\n          display: showGrid,\n        },\n        beginAtZero: true,\n      },\n    } : undefined,\n    onClick: (event, elements) => {\n      if (elements.length > 0 && onDataPointClick) {\n        const elementIndex = elements[0].index;\n        const dataPoint = (data as ChartDataPoint[])[elementIndex];\n        onDataPointClick(dataPoint, elementIndex);\n      }\n    },\n    onHover: (event, elements) => {\n      if (chartRef.current) {\n        chartRef.current.canvas.style.cursor = elements.length > 0 ? 'pointer' : 'default';\n      }\n    },\n    ...customOptions,\n  }), [showLegend, showTooltips, showGrid, type, onDataPointClick, data, customOptions]);\n\n  const exportChart = async (format: 'png' | 'pdf' | 'csv') => {\n    if (!chartRef.current) return;\n\n    try {\n      if (format === 'csv') {\n        const csvData = (data as ChartDataPoint[]).map(item => \n          `${item.label},${item.value}`\n        ).join('\\n');\n        \n        const blob = new Blob([`Label,Value\\n${csvData}`], { type: 'text/csv' });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `${title.toLowerCase().replace(/\\s+/g, '_')}_data.csv`;\n        link.click();\n        URL.revokeObjectURL(url);\n      } else {\n        const canvas = chartRef.current.canvas;\n        const url = canvas.toDataURL('image/png');\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `${title.toLowerCase().replace(/\\s+/g, '_')}_chart.png`;\n        link.click();\n      }\n    } catch (error) {\n      console.error('Export failed:', error);\n    }\n  };\n\n  const toggleFullscreen = () => {\n    setIsFullscreen(!isFullscreen);\n  };\n\n  const renderChart = () => {\n    switch (type) {\n      case 'line':\n        return <Line ref={chartRef} data={processedData} options={options} />;\n      case 'bar':\n        return <Bar ref={chartRef} data={processedData} options={options} />;\n      case 'doughnut':\n        return <Doughnut ref={chartRef} data={processedData} options={options} />;\n      case 'pie':\n        return <Pie ref={chartRef} data={processedData} options={options} />;\n      default:\n        return <Line ref={chartRef} data={processedData} options={options} />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={`bg-white rounded-lg border border-gray-200 p-6 ${className}`}>\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-gray-200 rounded w-1/3 mb-4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const ChartContainer = ({ children }: { children: React.ReactNode }) => (\n    <motion.div\n      className={`bg-white rounded-lg border border-gray-200 ${className} ${\n        isFullscreen \n          ? 'fixed inset-0 z-50 p-8' \n          : 'p-6'\n      }`}\n      initial={{ opacity: 0, scale: 0.95 }}\n      animate={{ \n        opacity: 1, \n        scale: isFullscreen ? 1.02 : 1,\n        transition: { duration: 0.3 }\n      }}\n      layout\n    >\n      {children}\n    </motion.div>\n  );\n\n  return (\n    <ChartContainer>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">{title}</h3>\n          \n          {/* Time Range Selector */}\n          {onTimeRangeChange && (\n            <div className=\"flex items-center space-x-2\">\n              <CalendarDaysIcon className=\"h-4 w-4 text-gray-500\" />\n              <select\n                value={timeRange}\n                onChange={(e) => onTimeRangeChange(e.target.value)}\n                className=\"text-sm border border-gray-300 rounded px-2 py-1 focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n              >\n                {TIME_RANGES.map(range => (\n                  <option key={range.value} value={range.value}>\n                    {range.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex items-center space-x-2\">\n          <BouncyButton\n            onClick={toggleFullscreen}\n            className=\"p-2 text-gray-500 hover:text-gray-700 rounded-md hover:bg-gray-100\"\n            title={isFullscreen ? \"Exit fullscreen\" : \"Fullscreen\"}\n          >\n            <ArrowsPointingOutIcon className=\"h-4 w-4\" />\n          </BouncyButton>\n\n          {enableExport && (\n            <Menu as=\"div\" className=\"relative\">\n              <Menu.Button as={BouncyButton} className=\"p-2 text-gray-500 hover:text-gray-700 rounded-md hover:bg-gray-100\">\n                <ArrowDownTrayIcon className=\"h-4 w-4\" />\n              </Menu.Button>\n\n              <Menu.Items className=\"absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded-md shadow-lg z-20\">\n                <div className=\"p-1\">\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        onClick={() => exportChart('png')}\n                        className={`${\n                          active ? 'bg-gray-50' : ''\n                        } group flex items-center w-full px-3 py-2 text-sm text-gray-700 rounded-md`}\n                      >\n                        <PhotoIcon className=\"h-4 w-4 mr-2\" />\n                        Export as PNG\n                      </button>\n                    )}\n                  </Menu.Item>\n                  \n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        onClick={() => exportChart('csv')}\n                        className={`${\n                          active ? 'bg-gray-50' : ''\n                        } group flex items-center w-full px-3 py-2 text-sm text-gray-700 rounded-md`}\n                      >\n                        <DocumentTextIcon className=\"h-4 w-4 mr-2\" />\n                        Export as CSV\n                      </button>\n                    )}\n                  </Menu.Item>\n                </div>\n              </Menu.Items>\n            </Menu>\n          )}\n        </div>\n      </div>\n\n      {/* Chart */}\n      <motion.div \n        style={{ height: isFullscreen ? 'calc(100vh - 200px)' : height }}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.1 }}\n      >\n        {renderChart()}\n      </motion.div>\n\n      {/* Data Summary */}\n      {!isFullscreen && data.length > 0 && 'value' in data[0] && (\n        <motion.div \n          className=\"mt-4 pt-4 border-t border-gray-200\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.2 }}\n        >\n          <div className=\"grid grid-cols-3 gap-4 text-sm\">\n            <div>\n              <span className=\"text-gray-500\">Total Points:</span>\n              <span className=\"ml-2 font-medium\">{data.length}</span>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Max Value:</span>\n              <span className=\"ml-2 font-medium\">\n                {Math.max(...(data as ChartDataPoint[]).map(d => d.value)).toLocaleString()}\n              </span>\n            </div>\n            <div>\n              <span className=\"text-gray-500\">Average:</span>\n              <span className=\"ml-2 font-medium\">\n                {Math.round(\n                  (data as ChartDataPoint[]).reduce((sum, d) => sum + d.value, 0) / data.length\n                ).toLocaleString()}\n              </span>\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </ChartContainer>\n  );\n};