import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  MagnifyingGlassIcon,\n  XMarkIcon,\n  ClockIcon,\n  BookmarkIcon,\n  SparklesIcon,\n  ArrowRightIcon,\n  UserIcon,\n  DocumentTextIcon,\n  IdentificationIcon,\n} from '@heroicons/react/24/outline';\nimport { Dialog, Combobox } from '@headlessui/react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport Fuse from 'fuse.js';\nimport debounce from 'lodash.debounce';\nimport { BouncyButton } from '../../common/DelightfulComponents';\n\nexport interface SearchResult {\n  id: string;\n  title: string;\n  description?: string;\n  type: 'user' | 'application' | 'pass' | 'document' | 'page';\n  url?: string;\n  metadata?: Record<string, any>;\n  relevanceScore?: number;\n  highlightedTitle?: string;\n  highlightedDescription?: string;\n}\n\nexport interface SearchCategory {\n  id: string;\n  name: string;\n  icon: React.ElementType;\n  color: string;\n  searchFunction: (query: string) => Promise<SearchResult[]>;\n}\n\ninterface GlobalSearchProps {\n  isOpen: boolean;\n  onClose: () => void;\n  categories: SearchCategory[];\n  recentSearches?: string[];\n  savedSearches?: Array<{ id: string; query: string; name: string }>;\n  onResultClick?: (result: SearchResult) => void;\n  onSaveSearch?: (query: string, name: string) => void;\n  placeholder?: string;\n  maxResults?: number;\n}\n\nconst DEFAULT_CATEGORIES: SearchCategory[] = [\n  {\n    id: 'users',\n    name: 'Users',\n    icon: UserIcon,\n    color: 'blue',\n    searchFunction: async (query: string) => {\n      // Mock implementation - replace with actual API call\n      return [];\n    }\n  },\n  {\n    id: 'applications',\n    name: 'Applications',\n    icon: DocumentTextIcon,\n    color: 'green',\n    searchFunction: async (query: string) => {\n      // Mock implementation - replace with actual API call\n      return [];\n    }\n  },\n  {\n    id: 'passes',\n    name: 'Passes',\n    icon: IdentificationIcon,\n    color: 'purple',\n    searchFunction: async (query: string) => {\n      // Mock implementation - replace with actual API call\n      return [];\n    }\n  },\n];\n\nconst SEARCH_HISTORY_KEY = 'globalSearchHistory';\nconst MAX_RECENT_SEARCHES = 5;\n\nconst getTypeIcon = (type: string) => {\n  switch (type) {\n    case 'user': return UserIcon;\n    case 'application': return DocumentTextIcon;\n    case 'pass': return IdentificationIcon;\n    default: return DocumentTextIcon;\n  }\n};\n\nconst getTypeColor = (type: string) => {\n  switch (type) {\n    case 'user': return 'text-blue-600 bg-blue-100';\n    case 'application': return 'text-green-600 bg-green-100';\n    case 'pass': return 'text-purple-600 bg-purple-100';\n    default: return 'text-gray-600 bg-gray-100';\n  }\n};\n\nconst highlightText = (text: string, query: string): string => {\n  if (!query.trim()) return text;\n  \n  const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n  return text.replace(regex, '<mark class=\"bg-yellow-200 px-1 rounded\">$1</mark>');\n};\n\nexport const GlobalSearch: React.FC<GlobalSearchProps> = ({\n  isOpen,\n  onClose,\n  categories = DEFAULT_CATEGORIES,\n  recentSearches = [],\n  savedSearches = [],\n  onResultClick,\n  onSaveSearch,\n  placeholder = 'Search anything...',\n  maxResults = 50,\n}) => {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<SearchResult[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [isLoading, setIsLoading] = useState(false);\n  const [recentHistory, setRecentHistory] = useState<string[]>([]);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [saveSearchName, setSaveSearchName] = useState('');\n  \n  const searchInputRef = useRef<HTMLInputElement>(null);\n  const resultsRef = useRef<HTMLDivElement>(null);\n\n  // Load recent searches from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem(SEARCH_HISTORY_KEY);\n    if (saved) {\n      try {\n        setRecentHistory(JSON.parse(saved));\n      } catch (error) {\n        console.error('Failed to load search history:', error);\n      }\n    }\n  }, []);\n\n  // Focus search input when modal opens\n  useEffect(() => {\n    if (isOpen && searchInputRef.current) {\n      setTimeout(() => searchInputRef.current?.focus(), 100);\n    }\n  }, [isOpen]);\n\n  // Global keyboard shortcut to open search\n  useHotkeys('cmd+k,ctrl+k', (e) => {\n    e.preventDefault();\n    if (!isOpen) {\n      // Open search modal\n    }\n  }, { enableOnFormTags: true });\n\n  // Debounced search function\n  const debouncedSearch = useCallback(\n    debounce(async (searchQuery: string) => {\n      if (!searchQuery.trim()) {\n        setResults([]);\n        setIsLoading(false);\n        return;\n      }\n\n      setIsLoading(true);\n      \n      try {\n        let allResults: SearchResult[] = [];\n        \n        if (selectedCategory === 'all') {\n          // Search all categories\n          const promises = categories.map(category => category.searchFunction(searchQuery));\n          const categoryResults = await Promise.all(promises);\n          allResults = categoryResults.flat();\n        } else {\n          // Search specific category\n          const category = categories.find(c => c.id === selectedCategory);\n          if (category) {\n            allResults = await category.searchFunction(searchQuery);\n          }\n        }\n        \n        // Add highlighting\n        const highlightedResults = allResults.map(result => ({\n          ...result,\n          highlightedTitle: highlightText(result.title, searchQuery),\n          highlightedDescription: result.description \n            ? highlightText(result.description, searchQuery)\n            : undefined,\n        }));\n        \n        // Sort by relevance and limit results\n        const sortedResults = highlightedResults\n          .sort((a, b) => (b.relevanceScore || 0) - (a.relevanceScore || 0))\n          .slice(0, maxResults);\n        \n        setResults(sortedResults);\n      } catch (error) {\n        console.error('Search failed:', error);\n        setResults([]);\n      } finally {\n        setIsLoading(false);\n      }\n    }, 300),\n    [selectedCategory, categories, maxResults]\n  );\n\n  // Trigger search when query changes\n  useEffect(() => {\n    debouncedSearch(query);\n    return () => debouncedSearch.cancel();\n  }, [query, debouncedSearch]);\n\n  const addToSearchHistory = (searchQuery: string) => {\n    const newHistory = [searchQuery, ...recentHistory.filter(item => item !== searchQuery)]\n      .slice(0, MAX_RECENT_SEARCHES);\n    \n    setRecentHistory(newHistory);\n    localStorage.setItem(SEARCH_HISTORY_KEY, JSON.stringify(newHistory));\n  };\n\n  const handleResultClick = (result: SearchResult) => {\n    addToSearchHistory(query);\n    onResultClick?.(result);\n    onClose();\n  };\n\n  const handleRecentSearchClick = (searchQuery: string) => {\n    setQuery(searchQuery);\n    searchInputRef.current?.focus();\n  };\n\n  const handleSaveSearch = () => {\n    if (query.trim() && saveSearchName.trim()) {\n      onSaveSearch?.(query, saveSearchName);\n      setSaveSearchName('');\n      setShowSaveDialog(false);\n    }\n  };\n\n  const clearSearchHistory = () => {\n    setRecentHistory([]);\n    localStorage.removeItem(SEARCH_HISTORY_KEY);\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <Dialog\n          as={motion.div}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          open={isOpen}\n          onClose={onClose}\n          className=\"relative z-50\"\n        >\n          <div className=\"fixed inset-0 bg-black/30\" aria-hidden=\"true\" />\n          \n          <div className=\"fixed inset-0 flex items-start justify-center p-4 pt-[10vh]\">\n            <motion.div\n              className=\"w-full max-w-2xl bg-white rounded-xl shadow-2xl overflow-hidden\"\n              initial={{ opacity: 0, scale: 0.95, y: -20 }}\n              animate={{ opacity: 1, scale: 1, y: 0 }}\n              exit={{ opacity: 0, scale: 0.95, y: -20 }}\n              transition={{ duration: 0.2 }}\n            >\n              {/* Search Header */}\n              <div className=\"flex items-center px-6 py-4 border-b border-gray-200\">\n                <MagnifyingGlassIcon className=\"h-5 w-5 text-gray-400 mr-3\" />\n                <input\n                  ref={searchInputRef}\n                  type=\"text\"\n                  value={query}\n                  onChange={(e) => setQuery(e.target.value)}\n                  placeholder={placeholder}\n                  className=\"flex-1 outline-none text-lg placeholder-gray-400\"\n                  autoComplete=\"off\"\n                />\n                \n                {query && (\n                  <button\n                    onClick={() => setQuery('')}\n                    className=\"p-1 text-gray-400 hover:text-gray-600 rounded mr-2\"\n                  >\n                    <XMarkIcon className=\"h-4 w-4\" />\n                  </button>\n                )}\n                \n                <button\n                  onClick={onClose}\n                  className=\"p-1 text-gray-400 hover:text-gray-600 rounded\"\n                >\n                  <XMarkIcon className=\"h-5 w-5\" />\n                </button>\n              </div>\n\n              {/* Category Filters */}\n              <div className=\"px-6 py-3 border-b border-gray-200 bg-gray-50\">\n                <div className=\"flex items-center space-x-2 overflow-x-auto\">\n                  <button\n                    onClick={() => setSelectedCategory('all')}\n                    className={`px-3 py-1 rounded-full text-sm font-medium whitespace-nowrap transition-colors ${\n                      selectedCategory === 'all'\n                        ? 'bg-primary-600 text-white'\n                        : 'bg-white text-gray-600 hover:bg-gray-100'\n                    }`}\n                  >\n                    All\n                  </button>\n                  \n                  {categories.map((category) => {\n                    const Icon = category.icon;\n                    return (\n                      <button\n                        key={category.id}\n                        onClick={() => setSelectedCategory(category.id)}\n                        className={`px-3 py-1 rounded-full text-sm font-medium whitespace-nowrap transition-colors flex items-center space-x-1 ${\n                          selectedCategory === category.id\n                            ? `bg-${category.color}-600 text-white`\n                            : 'bg-white text-gray-600 hover:bg-gray-100'\n                        }`}\n                      >\n                        <Icon className=\"h-3 w-3\" />\n                        <span>{category.name}</span>\n                      </button>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Search Results */}\n              <div ref={resultsRef} className=\"max-h-96 overflow-y-auto\">\n                {isLoading && (\n                  <div className=\"flex items-center justify-center py-8\">\n                    <motion.div\n                      animate={{ rotate: 360 }}\n                      transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                      className=\"w-6 h-6 border-2 border-primary-600 border-t-transparent rounded-full\"\n                    />\n                    <span className=\"ml-3 text-gray-600\">Searching...</span>\n                  </div>\n                )}\n\n                {!isLoading && query && results.length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <MagnifyingGlassIcon className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                    <p className=\"text-gray-600\">No results found for \"{query}\"</p>\n                  </div>\n                )}\n\n                {!isLoading && results.length > 0 && (\n                  <div className=\"py-2\">\n                    {results.map((result, index) => {\n                      const TypeIcon = getTypeIcon(result.type);\n                      return (\n                        <motion.button\n                          key={result.id}\n                          onClick={() => handleResultClick(result)}\n                          className=\"w-full px-6 py-3 text-left hover:bg-gray-50 flex items-center space-x-3 group\"\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ delay: index * 0.05 }}\n                          whileHover={{ x: 4 }}\n                        >\n                          <div className={`p-2 rounded-lg ${getTypeColor(result.type)}`}>\n                            <TypeIcon className=\"h-4 w-4\" />\n                          </div>\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <div \n                              className=\"font-medium text-gray-900 truncate\"\n                              dangerouslySetInnerHTML={{ \n                                __html: result.highlightedTitle || result.title \n                              }}\n                            />\n                            {result.description && (\n                              <div \n                                className=\"text-sm text-gray-600 truncate mt-1\"\n                                dangerouslySetInnerHTML={{ \n                                  __html: result.highlightedDescription || result.description \n                                }}\n                              />\n                            )}\n                          </div>\n                          \n                          <ArrowRightIcon className=\"h-4 w-4 text-gray-400 group-hover:text-gray-600 transition-colors\" />\n                        </motion.button>\n                      );\n                    })}\n                  </div>\n                )}\n\n                {/* Recent Searches & Saved Searches */}\n                {!query && (recentHistory.length > 0 || savedSearches.length > 0) && (\n                  <div className=\"py-4\">\n                    {/* Recent Searches */}\n                    {recentHistory.length > 0 && (\n                      <div className=\"px-6 mb-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <h3 className=\"text-sm font-medium text-gray-900 flex items-center\">\n                            <ClockIcon className=\"h-4 w-4 mr-2\" />\n                            Recent Searches\n                          </h3>\n                          <button\n                            onClick={clearSearchHistory}\n                            className=\"text-xs text-gray-500 hover:text-gray-700\"\n                          >\n                            Clear\n                          </button>\n                        </div>\n                        \n                        <div className=\"space-y-1\">\n                          {recentHistory.map((search, index) => (\n                            <motion.button\n                              key={index}\n                              onClick={() => handleRecentSearchClick(search)}\n                              className=\"w-full text-left px-3 py-2 text-sm text-gray-600 hover:bg-gray-50 rounded-md flex items-center space-x-2\"\n                              initial={{ opacity: 0, x: -10 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.05 }}\n                            >\n                              <ClockIcon className=\"h-3 w-3 text-gray-400\" />\n                              <span>{search}</span>\n                            </motion.button>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Saved Searches */}\n                    {savedSearches.length > 0 && (\n                      <div className=\"px-6\">\n                        <h3 className=\"text-sm font-medium text-gray-900 mb-3 flex items-center\">\n                          <BookmarkIcon className=\"h-4 w-4 mr-2\" />\n                          Saved Searches\n                        </h3>\n                        \n                        <div className=\"space-y-1\">\n                          {savedSearches.map((search, index) => (\n                            <motion.button\n                              key={search.id}\n                              onClick={() => handleRecentSearchClick(search.query)}\n                              className=\"w-full text-left px-3 py-2 text-sm hover:bg-gray-50 rounded-md flex items-center justify-between\"\n                              initial={{ opacity: 0, x: -10 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.05 }}\n                            >\n                              <div className=\"flex items-center space-x-2\">\n                                <BookmarkIcon className=\"h-3 w-3 text-gray-400\" />\n                                <span className=\"font-medium text-gray-900\">{search.name}</span>\n                              </div>\n                              <span className=\"text-gray-500 text-xs\">{search.query}</span>\n                            </motion.button>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {/* Search Footer */}\n              <div className=\"px-6 py-3 border-t border-gray-200 bg-gray-50 flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                  <div className=\"flex items-center space-x-1\">\n                    <kbd className=\"px-2 py-1 bg-white border border-gray-300 rounded text-xs\">↵</kbd>\n                    <span>to select</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <kbd className=\"px-2 py-1 bg-white border border-gray-300 rounded text-xs\">↑↓</kbd>\n                    <span>to navigate</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <kbd className=\"px-2 py-1 bg-white border border-gray-300 rounded text-xs\">esc</kbd>\n                    <span>to close</span>\n                  </div>\n                </div>\n                \n                {query && onSaveSearch && (\n                  <BouncyButton\n                    onClick={() => setShowSaveDialog(true)}\n                    className=\"text-xs text-primary-600 hover:text-primary-700 flex items-center space-x-1\"\n                  >\n                    <BookmarkIcon className=\"h-3 w-3\" />\n                    <span>Save Search</span>\n                  </BouncyButton>\n                )}\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Save Search Dialog */}\n          <AnimatePresence>\n            {showSaveDialog && (\n              <Dialog\n                as={motion.div}\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                open={showSaveDialog}\n                onClose={() => setShowSaveDialog(false)}\n                className=\"relative z-[60]\"\n              >\n                <div className=\"fixed inset-0 bg-black/30\" />\n                <div className=\"fixed inset-0 flex items-center justify-center p-4\">\n                  <Dialog.Panel className=\"bg-white rounded-lg p-6 w-full max-w-sm\">\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Save Search</h3>\n                    <input\n                      type=\"text\"\n                      value={saveSearchName}\n                      onChange={(e) => setSaveSearchName(e.target.value)}\n                      placeholder=\"Enter a name for this search\"\n                      className=\"w-full border border-gray-300 rounded-md px-3 py-2 mb-4 focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n                      autoFocus\n                    />\n                    <div className=\"flex justify-end space-x-3\">\n                      <button\n                        onClick={() => setShowSaveDialog(false)}\n                        className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50\"\n                      >\n                        Cancel\n                      </button>\n                      <button\n                        onClick={handleSaveSearch}\n                        disabled={!saveSearchName.trim()}\n                        className=\"px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 disabled:opacity-50\"\n                      >\n                        Save\n                      </button>\n                    </div>\n                  </Dialog.Panel>\n                </div>\n              </Dialog>\n            )}\n          </AnimatePresence>\n        </Dialog>\n      )}\n    </AnimatePresence>\n  );\n};