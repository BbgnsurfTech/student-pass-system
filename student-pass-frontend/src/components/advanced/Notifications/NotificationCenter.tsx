import React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  BellIcon,\n  XMarkIcon,\n  CheckIcon,\n  TrashIcon,\n  Cog6ToothIcon,\n  FunnelIcon,\n  MagnifyingGlassIcon,\n  ExclamationTriangleIcon,\n  InformationCircleIcon,\n  CheckCircleIcon,\n  EyeIcon,\n  EyeSlashIcon,\n} from '@heroicons/react/24/outline';\nimport { BellIcon as BellIconSolid } from '@heroicons/react/24/solid';\nimport { Popover, Switch, Menu } from '@headlessui/react';\nimport { format, isToday, isYesterday, formatDistanceToNow } from 'date-fns';\nimport { BouncyButton } from '../../common/DelightfulComponents';\nimport { useWebSocket } from '../../../services/websocketService';\n\nexport interface Notification {\n  id: string;\n  type: 'info' | 'success' | 'warning' | 'error';\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n  category: 'system' | 'application' | 'pass' | 'user' | 'security';\n  priority: 'low' | 'normal' | 'high' | 'urgent';\n  actionUrl?: string;\n  actionLabel?: string;\n  userId?: string;\n  metadata?: Record<string, any>;\n  persistent?: boolean; // Don't auto-dismiss\n}\n\nexport interface NotificationSettings {\n  enabled: boolean;\n  categories: {\n    system: boolean;\n    application: boolean;\n    pass: boolean;\n    user: boolean;\n    security: boolean;\n  };\n  priorities: {\n    low: boolean;\n    normal: boolean;\n    high: boolean;\n    urgent: boolean;\n  };\n  sound: boolean;\n  desktop: boolean;\n  email: boolean;\n  autoMarkAsRead: boolean;\n  maxNotifications: number;\n}\n\ninterface NotificationCenterProps {\n  notifications: Notification[];\n  settings: NotificationSettings;\n  onNotificationClick?: (notification: Notification) => void;\n  onMarkAsRead?: (notificationId: string) => void;\n  onMarkAllAsRead?: () => void;\n  onDelete?: (notificationId: string) => void;\n  onClearAll?: () => void;\n  onSettingsChange?: (settings: NotificationSettings) => void;\n  className?: string;\n}\n\nconst CATEGORY_LABELS = {\n  system: 'System',\n  application: 'Applications',\n  pass: 'Passes',\n  user: 'Users',\n  security: 'Security',\n};\n\nconst PRIORITY_LABELS = {\n  low: 'Low',\n  normal: 'Normal',\n  high: 'High',\n  urgent: 'Urgent',\n};\n\nconst NOTIFICATION_ICONS = {\n  info: InformationCircleIcon,\n  success: CheckCircleIcon,\n  warning: ExclamationTriangleIcon,\n  error: ExclamationTriangleIcon,\n};\n\nconst NOTIFICATION_COLORS = {\n  info: 'text-blue-600 bg-blue-100',\n  success: 'text-green-600 bg-green-100',\n  warning: 'text-yellow-600 bg-yellow-100',\n  error: 'text-red-600 bg-red-100',\n};\n\nconst PRIORITY_COLORS = {\n  low: 'border-gray-200',\n  normal: 'border-blue-200',\n  high: 'border-orange-200',\n  urgent: 'border-red-200 bg-red-50',\n};\n\nexport const NotificationCenter: React.FC<NotificationCenterProps> = ({\n  notifications,\n  settings,\n  onNotificationClick,\n  onMarkAsRead,\n  onMarkAllAsRead,\n  onDelete,\n  onClearAll,\n  onSettingsChange,\n  className = '',\n}) => {\n  const [showSettings, setShowSettings] = useState(false);\n  const [filterCategory, setFilterCategory] = useState<string>('all');\n  const [filterRead, setFilterRead] = useState<string>('all'); // all, read, unread\n  const [searchQuery, setSearchQuery] = useState('');\n  const [localSettings, setLocalSettings] = useState(settings);\n  \n  const webSocket = useWebSocket();\n\n  // Request notification permission on mount\n  useEffect(() => {\n    if (settings.desktop && 'Notification' in window && Notification.permission === 'default') {\n      Notification.requestPermission();\n    }\n  }, [settings.desktop]);\n\n  // Listen for real-time notifications\n  useEffect(() => {\n    const unsubscribe = webSocket.on('system:notification', (data) => {\n      // Handle real-time notifications\n      if (settings.desktop && Notification.permission === 'granted') {\n        new window.Notification(data.title, {\n          body: data.message,\n          icon: '/favicon.ico',\n          badge: '/favicon.ico',\n        });\n      }\n      \n      // Play sound if enabled\n      if (settings.sound) {\n        try {\n          const audio = new Audio('/notification-sound.mp3');\n          audio.volume = 0.3;\n          audio.play().catch(() => {}); // Ignore errors if audio fails\n        } catch (error) {\n          // Ignore audio errors\n        }\n      }\n    });\n\n    return unsubscribe;\n  }, [webSocket, settings.desktop, settings.sound]);\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n  const hasUrgentNotifications = notifications.some(n => n.priority === 'urgent' && !n.read);\n\n  // Filter notifications based on current filters\n  const filteredNotifications = notifications.filter(notification => {\n    if (filterCategory !== 'all' && notification.category !== filterCategory) {\n      return false;\n    }\n    \n    if (filterRead === 'read' && !notification.read) {\n      return false;\n    }\n    \n    if (filterRead === 'unread' && notification.read) {\n      return false;\n    }\n    \n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      return (\n        notification.title.toLowerCase().includes(query) ||\n        notification.message.toLowerCase().includes(query)\n      );\n    }\n    \n    return true;\n  });\n\n  // Group notifications by date\n  const groupedNotifications = filteredNotifications.reduce((groups, notification) => {\n    const date = notification.timestamp;\n    let key: string;\n    \n    if (isToday(date)) {\n      key = 'Today';\n    } else if (isYesterday(date)) {\n      key = 'Yesterday';\n    } else {\n      key = format(date, 'EEEE, MMMM d');\n    }\n    \n    if (!groups[key]) {\n      groups[key] = [];\n    }\n    \n    groups[key].push(notification);\n    return groups;\n  }, {} as Record<string, Notification[]>);\n\n  const handleNotificationClick = (notification: Notification) => {\n    if (settings.autoMarkAsRead && !notification.read) {\n      onMarkAsRead?.(notification.id);\n    }\n    onNotificationClick?.(notification);\n  };\n\n  const handleSettingsChange = (newSettings: Partial<NotificationSettings>) => {\n    const updated = { ...localSettings, ...newSettings };\n    setLocalSettings(updated);\n    onSettingsChange?.(updated);\n  };\n\n  const formatTimestamp = (timestamp: Date) => {\n    return formatDistanceToNow(timestamp, { addSuffix: true });\n  };\n\n  return (\n    <div className={`relative ${className}`}>\n      <Popover>\n        {({ open }) => (\n          <>\n            <Popover.Button as={React.Fragment}>\n              <BouncyButton className=\"relative p-2 text-gray-600 hover:text-gray-900 rounded-full hover:bg-gray-100\">\n                {unreadCount > 0 ? (\n                  <motion.div\n                    animate={hasUrgentNotifications ? {\n                      scale: [1, 1.2, 1],\n                      rotate: [0, 10, -10, 0]\n                    } : {}}\n                    transition={{ duration: 0.5, repeat: hasUrgentNotifications ? Infinity : 0, repeatDelay: 2 }}\n                  >\n                    <BellIconSolid className=\"h-6 w-6\" />\n                  </motion.div>\n                ) : (\n                  <BellIcon className=\"h-6 w-6\" />\n                )}\n                \n                {unreadCount > 0 && (\n                  <motion.div\n                    className={`absolute -top-1 -right-1 h-5 w-5 rounded-full flex items-center justify-center text-xs font-bold text-white ${\n                      hasUrgentNotifications ? 'bg-red-500' : 'bg-primary-500'\n                    }`}\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    key={unreadCount}\n                  >\n                    {unreadCount > 99 ? '99+' : unreadCount}\n                  </motion.div>\n                )}\n              </BouncyButton>\n            </Popover.Button>\n\n            <Popover.Panel className=\"absolute right-0 mt-2 w-96 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-[600px] flex flex-col\">\n              {/* Header */}\n              <div className=\"px-4 py-3 border-b border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Notifications</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      {unreadCount > 0 ? `${unreadCount} unread` : 'All caught up!'}\n                    </p>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Menu as=\"div\" className=\"relative\">\n                      <Menu.Button as={BouncyButton} className=\"p-1 text-gray-400 hover:text-gray-600\">\n                        <Cog6ToothIcon className=\"h-5 w-5\" />\n                      </Menu.Button>\n                      \n                      <Menu.Items className=\"absolute right-0 mt-1 w-48 bg-white border border-gray-200 rounded-md shadow-lg\">\n                        <div className=\"p-1\">\n                          <Menu.Item>\n                            {({ active }) => (\n                              <button\n                                onClick={() => setShowSettings(!showSettings)}\n                                className={`${active ? 'bg-gray-50' : ''} group flex items-center w-full px-3 py-2 text-sm text-gray-700 rounded-md`}\n                              >\n                                <Cog6ToothIcon className=\"h-4 w-4 mr-2\" />\n                                Settings\n                              </button>\n                            )}\n                          </Menu.Item>\n                          \n                          {unreadCount > 0 && (\n                            <Menu.Item>\n                              {({ active }) => (\n                                <button\n                                  onClick={onMarkAllAsRead}\n                                  className={`${active ? 'bg-gray-50' : ''} group flex items-center w-full px-3 py-2 text-sm text-gray-700 rounded-md`}\n                                >\n                                  <CheckIcon className=\"h-4 w-4 mr-2\" />\n                                  Mark All Read\n                                </button>\n                              )}\n                            </Menu.Item>\n                          )}\n                          \n                          {notifications.length > 0 && (\n                            <Menu.Item>\n                              {({ active }) => (\n                                <button\n                                  onClick={onClearAll}\n                                  className={`${active ? 'bg-gray-50' : ''} group flex items-center w-full px-3 py-2 text-sm text-red-600 rounded-md`}\n                                >\n                                  <TrashIcon className=\"h-4 w-4 mr-2\" />\n                                  Clear All\n                                </button>\n                              )}\n                            </Menu.Item>\n                          )}\n                        </div>\n                      </Menu.Items>\n                    </Menu>\n                  </div>\n                </div>\n\n                {/* Filters */}\n                <div className=\"mt-3 space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <MagnifyingGlassIcon className=\"h-4 w-4 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      placeholder=\"Search notifications...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"flex-1 text-sm border-0 focus:ring-0 focus:outline-none placeholder-gray-400\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2 text-xs\">\n                    <FunnelIcon className=\"h-3 w-3 text-gray-400\" />\n                    \n                    <select\n                      value={filterCategory}\n                      onChange={(e) => setFilterCategory(e.target.value)}\n                      className=\"text-xs border-0 focus:ring-0 focus:outline-none bg-transparent\"\n                    >\n                      <option value=\"all\">All categories</option>\n                      {Object.entries(CATEGORY_LABELS).map(([key, label]) => (\n                        <option key={key} value={key}>{label}</option>\n                      ))}\n                    </select>\n                    \n                    <select\n                      value={filterRead}\n                      onChange={(e) => setFilterRead(e.target.value)}\n                      className=\"text-xs border-0 focus:ring-0 focus:outline-none bg-transparent\"\n                    >\n                      <option value=\"all\">All</option>\n                      <option value=\"unread\">Unread</option>\n                      <option value=\"read\">Read</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n\n              {/* Settings Panel */}\n              <AnimatePresence>\n                {showSettings && (\n                  <motion.div\n                    className=\"border-b border-gray-200 bg-gray-50\"\n                    initial={{ height: 0 }}\n                    animate={{ height: 'auto' }}\n                    exit={{ height: 0 }}\n                    style={{ overflow: 'hidden' }}\n                  >\n                    <div className=\"p-4 space-y-4\">\n                      <div>\n                        <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Categories</h4>\n                        <div className=\"space-y-2\">\n                          {Object.entries(CATEGORY_LABELS).map(([key, label]) => (\n                            <div key={key} className=\"flex items-center justify-between\">\n                              <span className=\"text-sm text-gray-600\">{label}</span>\n                              <Switch\n                                checked={localSettings.categories[key as keyof typeof localSettings.categories]}\n                                onChange={(enabled) => handleSettingsChange({\n                                  categories: { ...localSettings.categories, [key]: enabled }\n                                })}\n                                className={`${localSettings.categories[key as keyof typeof localSettings.categories] ? 'bg-primary-600' : 'bg-gray-200'} relative inline-flex h-4 w-8 items-center rounded-full transition-colors`}\n                              >\n                                <span className={`${localSettings.categories[key as keyof typeof localSettings.categories] ? 'translate-x-4' : 'translate-x-1'} inline-block h-2 w-2 transform rounded-full bg-white transition-transform`} />\n                              </Switch>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Options</h4>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-600\">Desktop notifications</span>\n                            <Switch\n                              checked={localSettings.desktop}\n                              onChange={(enabled) => handleSettingsChange({ desktop: enabled })}\n                              className={`${localSettings.desktop ? 'bg-primary-600' : 'bg-gray-200'} relative inline-flex h-4 w-8 items-center rounded-full transition-colors`}\n                            >\n                              <span className={`${localSettings.desktop ? 'translate-x-4' : 'translate-x-1'} inline-block h-2 w-2 transform rounded-full bg-white transition-transform`} />\n                            </Switch>\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-600\">Sound alerts</span>\n                            <Switch\n                              checked={localSettings.sound}\n                              onChange={(enabled) => handleSettingsChange({ sound: enabled })}\n                              className={`${localSettings.sound ? 'bg-primary-600' : 'bg-gray-200'} relative inline-flex h-4 w-8 items-center rounded-full transition-colors`}\n                            >\n                              <span className={`${localSettings.sound ? 'translate-x-4' : 'translate-x-1'} inline-block h-2 w-2 transform rounded-full bg-white transition-transform`} />\n                            </Switch>\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-600\">Auto-mark as read</span>\n                            <Switch\n                              checked={localSettings.autoMarkAsRead}\n                              onChange={(enabled) => handleSettingsChange({ autoMarkAsRead: enabled })}\n                              className={`${localSettings.autoMarkAsRead ? 'bg-primary-600' : 'bg-gray-200'} relative inline-flex h-4 w-8 items-center rounded-full transition-colors`}\n                            >\n                              <span className={`${localSettings.autoMarkAsRead ? 'translate-x-4' : 'translate-x-1'} inline-block h-2 w-2 transform rounded-full bg-white transition-transform`} />\n                            </Switch>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n\n              {/* Notifications List */}\n              <div className=\"flex-1 overflow-y-auto\">\n                {filteredNotifications.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <BellIcon className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                    <p className=\"text-gray-600\">No notifications found</p>\n                  </div>\n                ) : (\n                  Object.entries(groupedNotifications).map(([dateGroup, groupNotifications]) => (\n                    <div key={dateGroup} className=\"pb-2\">\n                      <div className=\"sticky top-0 bg-gray-50 px-4 py-2 text-xs font-medium text-gray-500 border-b border-gray-200\">\n                        {dateGroup}\n                      </div>\n                      \n                      <div>\n                        {groupNotifications.map((notification, index) => {\n                          const Icon = NOTIFICATION_ICONS[notification.type];\n                          \n                          return (\n                            <motion.div\n                              key={notification.id}\n                              className={`border-l-4 ${PRIORITY_COLORS[notification.priority]} hover:bg-gray-50 transition-colors ${\n                                !notification.read ? 'bg-blue-50' : ''\n                              }`}\n                              initial={{ opacity: 0, x: -20 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.05 }}\n                            >\n                              <div className=\"p-4\">\n                                <div className=\"flex items-start space-x-3\">\n                                  <div className={`p-1 rounded-full ${NOTIFICATION_COLORS[notification.type]}`}>\n                                    <Icon className=\"h-3 w-3\" />\n                                  </div>\n                                  \n                                  <div className=\"flex-1 min-w-0\">\n                                    <div className=\"flex items-start justify-between\">\n                                      <div className=\"flex-1\">\n                                        <p className={`text-sm font-medium ${!notification.read ? 'text-gray-900' : 'text-gray-700'}`}>\n                                          {notification.title}\n                                        </p>\n                                        <p className={`text-sm mt-1 ${!notification.read ? 'text-gray-700' : 'text-gray-600'}`}>\n                                          {notification.message}\n                                        </p>\n                                        \n                                        <div className=\"flex items-center space-x-2 mt-2\">\n                                          <span className=\"text-xs text-gray-500\">\n                                            {formatTimestamp(notification.timestamp)}\n                                          </span>\n                                          \n                                          <span className={`text-xs px-2 py-0.5 rounded-full ${\n                                            notification.priority === 'urgent' ? 'bg-red-100 text-red-700' :\n                                            notification.priority === 'high' ? 'bg-orange-100 text-orange-700' :\n                                            'bg-gray-100 text-gray-600'\n                                          }`}>\n                                            {PRIORITY_LABELS[notification.priority]}\n                                          </span>\n                                        </div>\n                                      </div>\n                                      \n                                      <div className=\"flex items-center space-x-1 ml-2\">\n                                        {!notification.read && (\n                                          <button\n                                            onClick={() => onMarkAsRead?.(notification.id)}\n                                            className=\"p-1 text-blue-500 hover:text-blue-600 rounded\"\n                                            title=\"Mark as read\"\n                                          >\n                                            <EyeIcon className=\"h-3 w-3\" />\n                                          </button>\n                                        )}\n                                        \n                                        {notification.read && (\n                                          <EyeSlashIcon className=\"h-3 w-3 text-gray-400\" />\n                                        )}\n                                        \n                                        <button\n                                          onClick={() => onDelete?.(notification.id)}\n                                          className=\"p-1 text-red-400 hover:text-red-600 rounded\"\n                                          title=\"Delete\"\n                                        >\n                                          <XMarkIcon className=\"h-3 w-3\" />\n                                        </button>\n                                      </div>\n                                    </div>\n                                    \n                                    {notification.actionUrl && notification.actionLabel && (\n                                      <div className=\"mt-3\">\n                                        <BouncyButton\n                                          onClick={() => handleNotificationClick(notification)}\n                                          className=\"text-xs btn-primary px-3 py-1\"\n                                        >\n                                          {notification.actionLabel}\n                                        </BouncyButton>\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                              </div>\n                            </motion.div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </Popover.Panel>\n          </>\n        )}\n      </Popover>\n    </div>\n  );\n};