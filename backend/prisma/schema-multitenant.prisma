// Multi-Tenant Student Pass System Schema
// Supports database-per-tenant with shared infrastructure

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// TENANT MANAGEMENT MODELS
// ================================

model Tenant {
  id                  String    @id @default(uuid())
  subdomain           String    @unique
  customDomain        String?   @unique @map("custom_domain")
  name                String
  displayName         String    @map("display_name")
  description         String?
  status              TenantStatus @default(ACTIVE)
  tier                TenantTier   @default(STANDARD)
  
  // Branding & Customization
  logoUrl             String?   @map("logo_url")
  faviconUrl          String?   @map("favicon_url")
  primaryColor        String?   @map("primary_color")
  secondaryColor      String?   @map("secondary_color")
  accentColor         String?   @map("accent_color")
  customCss           String?   @map("custom_css")
  themeMode           ThemeMode @default(LIGHT)
  
  // Contact Information
  adminEmail          String    @map("admin_email")
  supportEmail        String?   @map("support_email")
  phone               String?
  address             Json?
  website             String?
  
  // Technical Configuration
  databaseUrl         String    @map("database_url")
  databaseSchema      String    @map("database_schema")
  storageQuotaGB      Int       @default(10) @map("storage_quota_gb")
  maxUsers            Int       @default(1000) @map("max_users")
  maxStudents         Int       @default(10000) @map("max_students")
  enabledFeatures     String[]  @map("enabled_features")
  settings            Json      @default("{}")
  
  // Billing & Subscription
  planId              String?   @map("plan_id")
  subscriptionStatus  SubscriptionStatus @default(TRIAL) @map("subscription_status")
  trialEndsAt         DateTime? @map("trial_ends_at")
  subscriptionEndsAt  DateTime? @map("subscription_ends_at")
  billingCycle        BillingCycle? @map("billing_cycle")
  
  // Compliance & Security
  dataRegion          String    @default("us-east-1") @map("data_region")
  encryptionKey       String?   @map("encryption_key")
  complianceFlags     String[]  @map("compliance_flags") // GDPR, FERPA, SOC2, etc.
  
  // Timestamps
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  lastActiveAt        DateTime? @map("last_active_at")
  
  // Relations
  plan                SubscriptionPlan? @relation(fields: [planId], references: [id])
  tenantUsers         TenantUser[]
  integrations        TenantIntegration[]
  webhooks            TenantWebhook[]
  apiKeys             TenantApiKey[]
  auditLogs           TenantAuditLog[]
  notifications       TenantNotification[]
  billingHistory      BillingHistory[]
  
  @@index([subdomain])
  @@index([customDomain])
  @@index([status])
  @@map("tenants")
}

model SubscriptionPlan {
  id                  String    @id @default(uuid())
  name                String    @unique
  displayName         String    @map("display_name")
  description         String?
  tier                TenantTier
  priceMonthly        Decimal?  @map("price_monthly")
  priceYearly         Decimal?  @map("price_yearly")
  maxUsers            Int       @map("max_users")
  maxStudents         Int       @map("max_students")
  storageQuotaGB      Int       @map("storage_quota_gb")
  features            String[]
  isActive            Boolean   @default(true) @map("is_active")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  
  // Relations
  tenants             Tenant[]
  
  @@map("subscription_plans")
}

model TenantUser {
  id              String      @id @default(uuid())
  tenantId        String      @map("tenant_id")
  userId          String      @map("user_id")
  role            TenantRole  @default(USER)
  permissions     String[]
  isActive        Boolean     @default(true) @map("is_active")
  joinedAt        DateTime    @default(now()) @map("joined_at")
  lastActiveAt    DateTime?   @map("last_active_at")
  
  // Relations
  tenant          Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, userId])
  @@map("tenant_users")
}

model TenantIntegration {
  id                  String            @id @default(uuid())
  tenantId            String            @map("tenant_id")
  type                IntegrationType
  name                String
  isActive            Boolean           @default(true) @map("is_active")
  configuration       Json
  credentials         Json              // Encrypted
  lastSyncAt          DateTime?         @map("last_sync_at")
  syncStatus          SyncStatus        @default(PENDING)
  errorMessage        String?           @map("error_message")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  
  // Relations
  tenant              Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, type, name])
  @@map("tenant_integrations")
}

model TenantWebhook {
  id              String            @id @default(uuid())
  tenantId        String            @map("tenant_id")
  url             String
  events          String[]
  secret          String
  isActive        Boolean           @default(true) @map("is_active")
  failureCount    Int               @default(0) @map("failure_count")
  lastTriggeredAt DateTime?         @map("last_triggered_at")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  
  // Relations
  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  deliveries      WebhookDelivery[]
  
  @@map("tenant_webhooks")
}

model WebhookDelivery {
  id              String      @id @default(uuid())
  webhookId       String      @map("webhook_id")
  event           String
  payload         Json
  response        Json?
  status          DeliveryStatus @default(PENDING)
  attempts        Int         @default(0)
  nextRetryAt     DateTime?   @map("next_retry_at")
  deliveredAt     DateTime?   @map("delivered_at")
  createdAt       DateTime    @default(now()) @map("created_at")
  
  // Relations
  webhook         TenantWebhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  
  @@map("webhook_deliveries")
}

model TenantApiKey {
  id              String      @id @default(uuid())
  tenantId        String      @map("tenant_id")
  name            String
  keyHash         String      @unique @map("key_hash")
  permissions     String[]
  rateLimitTier   String      @default("standard") @map("rate_limit_tier")
  isActive        Boolean     @default(true) @map("is_active")
  lastUsedAt      DateTime?   @map("last_used_at")
  expiresAt       DateTime?   @map("expires_at")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  
  // Relations
  tenant          Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  usageLogs       ApiUsageLog[]
  
  @@map("tenant_api_keys")
}

model ApiUsageLog {
  id              String      @id @default(uuid())
  apiKeyId        String      @map("api_key_id")
  tenantId        String      @map("tenant_id")
  endpoint        String
  method          String
  statusCode      Int         @map("status_code")
  responseTime    Int         @map("response_time")
  requestSize     Int         @map("request_size")
  responseSize    Int         @map("response_size")
  ipAddress       String      @map("ip_address")
  userAgent       String?     @map("user_agent")
  timestamp       DateTime    @default(now())
  
  // Relations
  apiKey          TenantApiKey @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  
  @@index([tenantId, timestamp])
  @@index([apiKeyId, timestamp])
  @@map("api_usage_logs")
}

model TenantAuditLog {
  id              String      @id @default(uuid())
  tenantId        String      @map("tenant_id")
  userId          String?     @map("user_id")
  action          String
  resourceType    String      @map("resource_type")
  resourceId      String?     @map("resource_id")
  oldValues       Json?       @map("old_values")
  newValues       Json?       @map("new_values")
  metadata        Json?
  ipAddress       String?     @map("ip_address")
  userAgent       String?     @map("user_agent")
  timestamp       DateTime    @default(now())
  
  // Relations
  tenant          Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([tenantId, timestamp])
  @@index([userId, timestamp])
  @@map("tenant_audit_logs")
}

model TenantNotification {
  id              String            @id @default(uuid())
  tenantId        String            @map("tenant_id")
  type            NotificationType
  title           String
  message         String
  severity        NotificationSeverity @default(INFO)
  isRead          Boolean           @default(false) @map("is_read")
  actionUrl       String?           @map("action_url")
  expiresAt       DateTime?         @map("expires_at")
  createdAt       DateTime          @default(now()) @map("created_at")
  readAt          DateTime?         @map("read_at")
  
  // Relations
  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([tenantId, createdAt])
  @@map("tenant_notifications")
}

model BillingHistory {
  id              String      @id @default(uuid())
  tenantId        String      @map("tenant_id")
  amount          Decimal
  currency        String      @default("USD")
  description     String
  status          PaymentStatus
  invoiceUrl      String?     @map("invoice_url")
  paymentMethod   String?     @map("payment_method")
  transactionId   String?     @map("transaction_id")
  billingPeriod   Json        @map("billing_period")
  metadata        Json?
  createdAt       DateTime    @default(now()) @map("created_at")
  paidAt          DateTime?   @map("paid_at")
  
  // Relations
  tenant          Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([tenantId, createdAt])
  @@map("billing_history")
}

// ================================
// ENHANCED CORE MODELS (Tenant-aware)
// ================================

model User {
  id                String    @id @default(uuid())
  tenantId          String    @map("tenant_id")
  email             String    
  passwordHash      String    @map("password_hash")
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  roleId            String?   @map("role_id")
  schoolId          String?   @map("school_id")
  isActive          Boolean   @default(true) @map("is_active")
  emailVerifiedAt   DateTime? @map("email_verified_at")
  lastLoginAt       DateTime? @map("last_login_at")
  preferences       Json      @default("{}")
  timezone          String    @default("UTC")
  locale            String    @default("en")
  mfaEnabled        Boolean   @default(false) @map("mfa_enabled")
  mfaSecret         String?   @map("mfa_secret")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  role                    Role?     @relation(fields: [roleId], references: [id])
  school                  School?   @relation(fields: [schoolId], references: [id])
  auditLogs               AuditLog[]
  issuedPasses            Pass[]    @relation("IssuedBy")
  revokedPasses           Pass[]    @relation("RevokedBy")
  uploadedDocuments       Document[] @relation("UploadedBy")
  reviewedApplications    StudentApplication[] @relation("ReviewedApplications")
  ssoProfiles             SSOProfile[]

  @@unique([tenantId, email])
  @@index([tenantId])
  @@map("users")
}

model School {
  id        String    @id @default(uuid())
  tenantId  String    @map("tenant_id")
  name      String
  code      String    
  address   String?
  phone     String?
  email     String?
  website   String?
  logoUrl   String?   @map("logo_url")
  isActive  Boolean   @default(true) @map("is_active")
  settings  Json      @default("{}")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  users               User[]
  students            Student[]
  studentApplications StudentApplication[]
  departments         Department[]
  accessPoints        AccessPoint[]

  @@unique([tenantId, code])
  @@index([tenantId])
  @@map("schools")
}

// Additional models for Enterprise features
model SSOProfile {
  id              String    @id @default(uuid())
  tenantId        String    @map("tenant_id")
  userId          String    @map("user_id")
  provider        String    // SAML, OAuth2, LDAP
  externalId      String    @map("external_id")
  attributes      Json
  lastSyncAt      DateTime? @map("last_sync_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, provider, externalId])
  @@map("sso_profiles")
}

model BlockchainRecord {
  id              String    @id @default(uuid())
  tenantId        String    @map("tenant_id")
  recordType      String    @map("record_type") // pass_issue, pass_revoke, verification
  entityId        String    @map("entity_id")
  blockchainTxHash String   @unique @map("blockchain_tx_hash")
  blockchainNetwork String  @map("blockchain_network")
  contractAddress String?   @map("contract_address")
  metadata        Json
  status          String    @default("pending") // pending, confirmed, failed
  createdAt       DateTime  @default(now()) @map("created_at")
  confirmedAt     DateTime? @map("confirmed_at")

  @@index([tenantId, recordType])
  @@index([entityId])
  @@map("blockchain_records")
}

// IoT and Smart Campus Integration
model IoTDevice {
  id              String    @id @default(uuid())
  tenantId        String    @map("tenant_id")
  schoolId        String    @map("school_id")
  deviceId        String    @unique @map("device_id")
  name            String
  type            DeviceType
  location        String?
  manufacturer    String?
  model           String?
  firmwareVersion String?   @map("firmware_version")
  ipAddress       String?   @map("ip_address")
  macAddress      String?   @map("mac_address")
  status          DeviceStatus @default(OFFLINE)
  configuration   Json      @default("{}")
  lastHeartbeat   DateTime? @map("last_heartbeat")
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  school          School    @relation(fields: [schoolId], references: [id])
  sensorData      SensorData[]
  deviceAlerts    DeviceAlert[]

  @@index([tenantId, schoolId])
  @@map("iot_devices")
}

model SensorData {
  id              String    @id @default(uuid())
  deviceId        String    @map("device_id")
  sensorType      String    @map("sensor_type")
  value           Decimal
  unit            String
  metadata        Json?
  timestamp       DateTime  @default(now())

  // Relations
  device          IoTDevice @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId, timestamp])
  @@index([sensorType, timestamp])
  @@map("sensor_data")
}

model DeviceAlert {
  id              String      @id @default(uuid())
  deviceId        String      @map("device_id")
  alertType       AlertType
  severity        AlertSeverity @default(INFO)
  title           String
  message         String
  isResolved      Boolean     @default(false) @map("is_resolved")
  resolvedAt      DateTime?   @map("resolved_at")
  resolvedBy      String?     @map("resolved_by")
  metadata        Json?
  createdAt       DateTime    @default(now()) @map("created_at")

  // Relations
  device          IoTDevice   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId, createdAt])
  @@map("device_alerts")
}

// Enhanced remaining models with tenant isolation...
// (Adding tenantId to all existing models)

model Role {
  id          String @id @default(uuid())
  tenantId    String @map("tenant_id")
  name        String 
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  users       User[]
  permissions RolePermission[]

  @@unique([tenantId, name])
  @@index([tenantId])
  @@map("roles")
}

model Permission {
  id          String @id @default(uuid())
  tenantId    String @map("tenant_id")
  name        String 
  description String?
  resource    String
  action      String
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  roles       RolePermission[]

  @@unique([tenantId, name])
  @@index([tenantId])
  @@map("permissions")
}

model RolePermission {
  roleId       String @map("role_id")
  permissionId String @map("permission_id")

  // Relations
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Department {
  id        String   @id @default(uuid())
  tenantId  String   @map("tenant_id")
  name      String
  code      String
  schoolId  String   @map("school_id")
  headName  String?  @map("head_name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  school              School              @relation(fields: [schoolId], references: [id])
  students            Student[]
  studentApplications StudentApplication[]

  @@unique([tenantId, schoolId, code])
  @@index([tenantId])
  @@map("departments")
}

model StudentApplication {
  id                     String    @id @default(uuid())
  tenantId               String    @map("tenant_id")
  studentId              String    @map("student_id")
  email                  String
  firstName              String    @map("first_name")
  lastName               String    @map("last_name")
  middleName             String?   @map("middle_name")
  dateOfBirth            DateTime? @map("date_of_birth")
  gender                 String?
  phone                  String?
  address                String?
  emergencyContactName   String?   @map("emergency_contact_name")
  emergencyContactPhone  String?   @map("emergency_contact_phone")
  schoolId               String    @map("school_id")
  departmentId           String?   @map("department_id")
  program                String?
  yearOfStudy            Int?      @map("year_of_study")
  enrollmentDate         DateTime? @map("enrollment_date")
  graduationDate         DateTime? @map("graduation_date")
  status                 String    @default("pending")
  photoUrl               String?   @map("photo_url")
  appliedAt              DateTime  @default(now()) @map("applied_at")
  reviewedAt             DateTime? @map("reviewed_at")
  reviewedById           String?   @map("reviewed_by")
  reviewComments         String?   @map("review_comments")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  // Relations
  school      School      @relation(fields: [schoolId], references: [id])
  department  Department? @relation(fields: [departmentId], references: [id])
  reviewedBy  User?       @relation("ReviewedApplications", fields: [reviewedById], references: [id])
  documents   ApplicationDocument[]
  student     Student?    @relation("ApprovedApplication")

  @@unique([tenantId, studentId])
  @@index([tenantId, schoolId])
  @@index([tenantId, email])
  @@index([tenantId, status])
  @@map("student_applications")
}

model Student {
  id                     String    @id @default(uuid())
  tenantId               String    @map("tenant_id")
  applicationId          String    @unique @map("application_id")
  studentId              String    @map("student_id")
  email                  String?
  firstName              String    @map("first_name")
  lastName               String    @map("last_name")
  middleName             String?   @map("middle_name")
  dateOfBirth            DateTime? @map("date_of_birth")
  gender                 String?
  phone                  String?
  address                String?
  emergencyContactName   String?   @map("emergency_contact_name")
  emergencyContactPhone  String?   @map("emergency_contact_phone")
  schoolId               String    @map("school_id")
  departmentId           String?   @map("department_id")
  program                String?
  yearOfStudy            Int?      @map("year_of_study")
  enrollmentDate         DateTime? @map("enrollment_date")
  graduationDate         DateTime? @map("graduation_date")
  status                 String    @default("active")
  photoUrl               String?   @map("photo_url")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  deletedAt              DateTime? @map("deleted_at")

  // Relations
  application StudentApplication @relation("ApprovedApplication", fields: [applicationId], references: [id])
  school      School      @relation(fields: [schoolId], references: [id])
  department  Department? @relation(fields: [departmentId], references: [id])
  passes      Pass[]
  documents   Document[]
  accessLogs  AccessLog[]

  @@unique([tenantId, studentId])
  @@index([tenantId, schoolId])
  @@index([tenantId, email])
  @@map("students")
}

model Pass {
  id           String    @id @default(uuid())
  tenantId     String    @map("tenant_id")
  studentId    String    @map("student_id")
  passNumber   String    @map("pass_number")
  qrCode       String    @map("qr_code")
  issueDate    DateTime  @map("issue_date")
  expiryDate   DateTime  @map("expiry_date")
  status       String    @default("active")
  passType     String    @default("standard") @map("pass_type")
  issuedById   String    @map("issued_by")
  revokedById  String?   @map("revoked_by")
  revokedAt    DateTime? @map("revoked_at")
  revokeReason String?   @map("revoke_reason")
  metadata     Json?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  student     Student     @relation(fields: [studentId], references: [id])
  issuedBy    User        @relation("IssuedBy", fields: [issuedById], references: [id])
  revokedBy   User?       @relation("RevokedBy", fields: [revokedById], references: [id])
  accessLogs  AccessLog[]

  @@unique([tenantId, passNumber])
  @@unique([tenantId, qrCode])
  @@index([tenantId, studentId])
  @@index([tenantId, status])
  @@map("passes")
}

model AccessPoint {
  id         String  @id @default(uuid())
  tenantId   String  @map("tenant_id")
  name       String
  location   String?
  deviceId   String? @map("device_id")
  schoolId   String  @map("school_id")
  accessType String? @map("access_type")
  isActive   Boolean @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  school     School      @relation(fields: [schoolId], references: [id])
  accessLogs AccessLog[]

  @@unique([tenantId, deviceId])
  @@index([tenantId, schoolId])
  @@map("access_points")
}

model AccessLog {
  id             String   @id @default(uuid())
  tenantId       String   @map("tenant_id")
  studentId      String?  @map("student_id")
  passId         String?  @map("pass_id")
  accessPointId  String   @map("access_point_id")
  accessTime     DateTime @default(now()) @map("access_time")
  accessType     String?  @map("access_type")
  status         String
  reason         String?
  deviceInfo     Json?    @map("device_info")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  student     Student?    @relation(fields: [studentId], references: [id])
  pass        Pass?       @relation(fields: [passId], references: [id])
  accessPoint AccessPoint @relation(fields: [accessPointId], references: [id])

  @@index([tenantId, studentId])
  @@index([tenantId, accessTime])
  @@map("access_logs")
}

model Document {
  id           String   @id @default(uuid())
  tenantId     String   @map("tenant_id")
  studentId    String   @map("student_id")
  documentType String   @map("document_type")
  fileName     String   @map("file_name")
  filePath     String   @map("file_path")
  fileSize     Int      @map("file_size")
  mimeType     String   @map("mime_type")
  uploadedById String   @map("uploaded_by")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  student    Student @relation(fields: [studentId], references: [id])
  uploadedBy User    @relation("UploadedBy", fields: [uploadedById], references: [id])

  @@index([tenantId, studentId])
  @@map("documents")
}

model AuditLog {
  id           String   @id @default(uuid())
  tenantId     String   @map("tenant_id")
  userId       String?  @map("user_id")
  action       String
  resourceType String   @map("resource_type")
  resourceId   String?  @map("resource_id")
  oldValues    Json?    @map("old_values")
  newValues    Json?    @map("new_values")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([tenantId, userId])
  @@index([tenantId, createdAt])
  @@map("audit_logs")
}

model ApplicationDocument {
  id              String   @id @default(uuid())
  tenantId        String   @map("tenant_id")
  applicationId   String   @map("application_id")
  documentType    String   @map("document_type")
  fileName        String   @map("file_name")
  filePath        String   @map("file_path")
  fileSize        Int      @map("file_size")
  mimeType        String   @map("mime_type")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  application StudentApplication @relation(fields: [applicationId], references: [id])

  @@index([tenantId, applicationId])
  @@map("application_documents")
}

// ================================
// ENUMS
// ================================

enum TenantStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
  PENDING_SETUP
}

enum TenantTier {
  TRIAL
  BASIC
  STANDARD
  PREMIUM
  ENTERPRISE
}

enum TenantRole {
  OWNER
  ADMIN
  MANAGER
  USER
}

enum ThemeMode {
  LIGHT
  DARK
  AUTO
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum IntegrationType {
  SIS_BANNER
  SIS_PEOPLESOFT
  SIS_CUSTOM
  LMS_CANVAS
  LMS_MOODLE
  LMS_BLACKBOARD
  AD_LDAP
  SAML_SSO
  OAUTH2_SSO
  CRM_SALESFORCE
  ERP_SAP
  HR_WORKDAY
  PAYMENT_STRIPE
  EMAIL_SENDGRID
  SMS_TWILIO
  BLOCKCHAIN_ETHEREUM
  BLOCKCHAIN_HYPERLEDGER
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
  RETRYING
}

enum NotificationType {
  SYSTEM
  SECURITY
  BILLING
  INTEGRATION
  COMPLIANCE
}

enum NotificationSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELED
}

enum DeviceType {
  ACCESS_SCANNER
  CAMERA
  SENSOR_OCCUPANCY
  SENSOR_TEMPERATURE
  SENSOR_AIR_QUALITY
  SMART_LOCK
  TURNSTILE
  GATEWAY
  BEACON
}

enum DeviceStatus {
  ONLINE
  OFFLINE
  ERROR
  MAINTENANCE
}

enum AlertType {
  DEVICE_OFFLINE
  SENSOR_ANOMALY
  SECURITY_BREACH
  MAINTENANCE_DUE
  CONNECTIVITY_ISSUE
  BATTERY_LOW
  FIRMWARE_UPDATE
}

enum AlertSeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}