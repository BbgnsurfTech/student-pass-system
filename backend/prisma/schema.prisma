// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  passwordHash      String    @map("password_hash")
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  roleId            String?   @map("role_id")
  schoolId          String?   @map("school_id")
  isActive          Boolean   @default(true) @map("is_active")
  emailVerifiedAt   DateTime? @map("email_verified_at")
  lastLoginAt       DateTime? @map("last_login_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  role                    Role?     @relation(fields: [roleId], references: [id])
  school                  School?   @relation(fields: [schoolId], references: [id])
  auditLogs               AuditLog[]
  issuedPasses            Pass[]    @relation("IssuedBy")
  revokedPasses           Pass[]    @relation("RevokedBy")
  uploadedDocuments       Document[] @relation("UploadedBy")
  reviewedApplications    StudentApplication[] @relation("ReviewedApplications")

  @@map("users")
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String @id @default(uuid())
  name        String @unique
  description String?
  resource    String
  action      String
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  roles       RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId       String @map("role_id")
  permissionId String @map("permission_id")

  // Relations
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model School {
  id        String    @id @default(uuid())
  name      String
  code      String    @unique
  address   String?
  phone     String?
  email     String?
  website   String?
  logoUrl   String?   @map("logo_url")
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  users               User[]
  students            Student[]
  studentApplications StudentApplication[]
  departments         Department[]
  accessPoints        AccessPoint[]

  @@map("schools")
}

model Department {
  id        String   @id @default(uuid())
  name      String
  code      String
  schoolId  String   @map("school_id")
  headName  String?  @map("head_name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  school              School              @relation(fields: [schoolId], references: [id])
  students            Student[]
  studentApplications StudentApplication[]

  @@unique([schoolId, code])
  @@map("departments")
}

model StudentApplication {
  id                     String    @id @default(uuid())
  studentId              String    @unique @map("student_id")
  email                  String
  firstName              String    @map("first_name")
  lastName               String    @map("last_name")
  middleName             String?   @map("middle_name")
  dateOfBirth            DateTime? @map("date_of_birth")
  gender                 String?
  phone                  String?
  address                String?
  emergencyContactName   String?   @map("emergency_contact_name")
  emergencyContactPhone  String?   @map("emergency_contact_phone")
  schoolId               String    @map("school_id")
  departmentId           String?   @map("department_id")
  program                String?
  yearOfStudy            Int?      @map("year_of_study")
  enrollmentDate         DateTime? @map("enrollment_date")
  graduationDate         DateTime? @map("graduation_date")
  status                 String    @default("pending") // pending, approved, rejected, under_review
  photoUrl               String?   @map("photo_url")
  appliedAt              DateTime  @default(now()) @map("applied_at")
  reviewedAt             DateTime? @map("reviewed_at")
  reviewedById           String?   @map("reviewed_by")
  reviewComments         String?   @map("review_comments")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  // Relations
  school      School      @relation(fields: [schoolId], references: [id])
  department  Department? @relation(fields: [departmentId], references: [id])
  reviewedBy  User?       @relation("ReviewedApplications", fields: [reviewedById], references: [id])
  documents   ApplicationDocument[]
  student     Student?    @relation("ApprovedApplication")

  @@index([schoolId])
  @@index([studentId])
  @@index([email])
  @@index([status])
  @@index([appliedAt])
  @@map("student_applications")
}

model Student {
  id                     String    @id @default(uuid())
  applicationId          String    @unique @map("application_id")
  studentId              String    @unique @map("student_id")
  email                  String?
  firstName              String    @map("first_name")
  lastName               String    @map("last_name")
  middleName             String?   @map("middle_name")
  dateOfBirth            DateTime? @map("date_of_birth")
  gender                 String?
  phone                  String?
  address                String?
  emergencyContactName   String?   @map("emergency_contact_name")
  emergencyContactPhone  String?   @map("emergency_contact_phone")
  schoolId               String    @map("school_id")
  departmentId           String?   @map("department_id")
  program                String?
  yearOfStudy            Int?      @map("year_of_study")
  enrollmentDate         DateTime? @map("enrollment_date")
  graduationDate         DateTime? @map("graduation_date")
  status                 String    @default("active") // active, inactive, graduated, suspended
  photoUrl               String?   @map("photo_url")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  deletedAt              DateTime? @map("deleted_at")

  // Relations
  application StudentApplication @relation("ApprovedApplication", fields: [applicationId], references: [id])
  school      School      @relation(fields: [schoolId], references: [id])
  department  Department? @relation(fields: [departmentId], references: [id])
  passes      Pass[]
  documents   Document[]
  accessLogs  AccessLog[]

  @@index([schoolId])
  @@index([studentId])
  @@index([email])
  @@map("students")
}

model Pass {
  id           String    @id @default(uuid())
  studentId    String    @map("student_id")
  passNumber   String    @unique @map("pass_number")
  qrCode       String    @unique @map("qr_code")
  issueDate    DateTime  @map("issue_date")
  expiryDate   DateTime  @map("expiry_date")
  status       String    @default("active") // active, inactive, expired, revoked
  passType     String    @default("standard") @map("pass_type") // standard, temporary, visitor
  issuedById   String    @map("issued_by")
  revokedById  String?   @map("revoked_by")
  revokedAt    DateTime? @map("revoked_at")
  revokeReason String?   @map("revoke_reason")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  student     Student     @relation(fields: [studentId], references: [id])
  issuedBy    User        @relation("IssuedBy", fields: [issuedById], references: [id])
  revokedBy   User?       @relation("RevokedBy", fields: [revokedById], references: [id])
  accessLogs  AccessLog[]

  @@index([studentId])
  @@index([status])
  @@index([expiryDate])
  @@map("passes")
}

model AccessPoint {
  id         String  @id @default(uuid())
  name       String
  location   String?
  deviceId   String? @unique @map("device_id")
  schoolId   String  @map("school_id")
  accessType String? @map("access_type") // entry, exit, both
  isActive   Boolean @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  school     School      @relation(fields: [schoolId], references: [id])
  accessLogs AccessLog[]

  @@map("access_points")
}

model AccessLog {
  id             String   @id @default(uuid())
  studentId      String?  @map("student_id")
  passId         String?  @map("pass_id")
  accessPointId  String   @map("access_point_id")
  accessTime     DateTime @default(now()) @map("access_time")
  accessType     String?  @map("access_type") // entry, exit
  status         String   // granted, denied
  reason         String?
  deviceInfo     Json?    @map("device_info")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  student     Student?    @relation(fields: [studentId], references: [id])
  pass        Pass?       @relation(fields: [passId], references: [id])
  accessPoint AccessPoint @relation(fields: [accessPointId], references: [id])

  @@index([studentId])
  @@index([accessTime])
  @@index([accessPointId])
  @@map("access_logs")
}

model Document {
  id           String   @id @default(uuid())
  studentId    String   @map("student_id")
  documentType String   @map("document_type")
  fileName     String   @map("file_name")
  filePath     String   @map("file_path")
  fileSize     Int      @map("file_size")
  mimeType     String   @map("mime_type")
  uploadedById String   @map("uploaded_by")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  student    Student @relation(fields: [studentId], references: [id])
  uploadedBy User    @relation("UploadedBy", fields: [uploadedById], references: [id])

  @@map("documents")
}

model AuditLog {
  id           String   @id @default(uuid())
  userId       String?  @map("user_id")
  action       String
  resourceType String   @map("resource_type")
  resourceId   String?  @map("resource_id")
  oldValues    Json?    @map("old_values")
  newValues    Json?    @map("new_values")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

model ApplicationDocument {
  id              String   @id @default(uuid())
  applicationId   String   @map("application_id")
  documentType    String   @map("document_type")
  fileName        String   @map("file_name")
  filePath        String   @map("file_path")
  fileSize        Int      @map("file_size")
  mimeType        String   @map("mime_type")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  application StudentApplication @relation(fields: [applicationId], references: [id])

  @@map("application_documents")
}