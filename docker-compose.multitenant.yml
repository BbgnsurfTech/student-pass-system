version: '3.8'

services:
  # Main Application (Multi-tenant)
  student-pass-api:
    build:
      context: ./backend
      dockerfile: Dockerfile.multitenant
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      
      # Master Database (for tenant management)
      MASTER_DATABASE_URL: postgresql://postgres:password@master-postgres:5432/student_pass_master
      
      # Redis for caching and sessions
      REDIS_URL: redis://redis:6379
      
      # Elasticsearch for search
      ELASTICSEARCH_URL: http://elasticsearch:9200
      
      # MQTT for IoT
      MQTT_BROKER_URL: mqtt://mosquitto:1883
      
      # AWS Services
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      
      # Email Service
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      
      # Blockchain Configuration
      ETHEREUM_RPC_URL: ${ETHEREUM_RPC_URL}
      POLYGON_RPC_URL: ${POLYGON_RPC_URL}
      BLOCKCHAIN_PRIVATE_KEY: ${BLOCKCHAIN_PRIVATE_KEY}
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # External APIs
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      
    depends_on:
      - master-postgres
      - redis
      - elasticsearch
      - mosquitto
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
      - ./ml-models:/app/ml-models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway / Load Balancer
  nginx-gateway:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./uploads:/var/www/uploads
    depends_on:
      - student-pass-api
    restart: unless-stopped

  # Master Database (Tenant management)
  master-postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: student_pass_master
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - master_postgres_data:/var/lib/postgresql/data
      - ./database/master-init.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d student_pass_master"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Tenant Database Pool (Dynamic scaling)
  tenant-postgres-1:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: tenant_db_1
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - tenant_postgres_1_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tenant_db_1"]
      interval: 30s
      timeout: 5s
      retries: 5

  tenant-postgres-2:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: tenant_db_2
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - tenant_postgres_2_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tenant_db_2"]
      interval: 30s
      timeout: 5s
      retries: 5

  tenant-postgres-3:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: tenant_db_3
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - tenant_postgres_3_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tenant_db_3"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Redis Cluster (for high availability)
  redis-cluster-1:
    image: redis:7-alpine
    command: redis-server --port 7000 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis_cluster_1:/data
    restart: unless-stopped

  redis-cluster-2:
    image: redis:7-alpine
    command: redis-server --port 7001 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis_cluster_2:/data
    restart: unless-stopped

  redis-cluster-3:
    image: redis:7-alpine
    command: redis-server --port 7002 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis_cluster_3:/data
    restart: unless-stopped

  # Elasticsearch for search and analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for Elasticsearch visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # MQTT Broker for IoT devices
  mosquitto:
    image: eclipse-mosquitto:2.0
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
      - mosquitto_data:/mosquitto/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h localhost -t test -m 'test' || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for monitoring and dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel,grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  # Queue Worker for background jobs
  queue-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.multitenant
    environment:
      NODE_ENV: production
      MASTER_DATABASE_URL: postgresql://postgres:password@master-postgres:5432/student_pass_master
      REDIS_URL: redis://redis:6379
      WORKER_TYPE: queue
    depends_on:
      - master-postgres
      - redis
    restart: unless-stopped
    command: ["npm", "run", "queue:worker"]

  # Machine Learning Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models
    volumes:
      - ./ml-models:/app/models
    depends_on:
      - redis
    restart: unless-stopped

  # Blockchain Node (Ethereum)
  ethereum-node:
    image: ethereum/client-go:latest
    ports:
      - "8545:8545"
      - "8546:8546"
      - "30303:30303"
    volumes:
      - ethereum_data:/root/.ethereum
    command: >
      --http
      --http.addr 0.0.0.0
      --http.port 8545
      --http.corsdomain "*"
      --http.api eth,net,web3,personal,admin
      --ws
      --ws.addr 0.0.0.0
      --ws.port 8546
      --ws.origins "*"
      --ws.api eth,net,web3,personal,admin
    restart: unless-stopped

  # Backup Service
  backup-service:
    image: postgres:15-alpine
    environment:
      PGPASSWORD: password
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: |
      sh -c "
        chmod +x /backup.sh &&
        while true; do
          /backup.sh
          sleep 86400  # Daily backups
        done
      "
    depends_on:
      - master-postgres
    restart: unless-stopped

  # Log aggregation with Filebeat
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.10.0
    user: root
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  master_postgres_data:
  tenant_postgres_1_data:
  tenant_postgres_2_data:
  tenant_postgres_3_data:
  redis_data:
  redis_cluster_1:
  redis_cluster_2:
  redis_cluster_3:
  elasticsearch_data:
  mosquitto_data:
  minio_data:
  grafana_data:
  prometheus_data:
  ethereum_data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16