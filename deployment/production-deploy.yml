# Production Deployment Configuration
# Student Pass System - Enterprise Grade Infrastructure

version: '3.8'

services:
  # Load Balancer & Reverse Proxy
  nginx:
    image: nginx:1.24-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - api-gateway
      - web-app
    restart: unless-stopped
    networks:
      - frontend
      - backend
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # API Gateway
  api-gateway:
    image: studentpass/api-gateway:${VERSION:-latest}
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      API_PORT: 3000
      REDIS_URL: redis://redis:6379
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGINS: ${CORS_ORIGINS}
      RATE_LIMIT_MAX: 1000
      RATE_LIMIT_WINDOW: 900000
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
      - mongodb
    restart: unless-stopped
    networks:
      - frontend
      - backend
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Student Management Service
  student-service:
    image: studentpass/student-service:${VERSION:-latest}
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://redis:6379
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET}
    depends_on:
      - postgres
      - redis
      - elasticsearch
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Pass Management Service
  pass-service:
    image: studentpass/pass-service:${VERSION:-latest}
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://redis:6379
      BLOCKCHAIN_RPC_URL: ${BLOCKCHAIN_RPC_URL}
      BLOCKCHAIN_PRIVATE_KEY: ${BLOCKCHAIN_PRIVATE_KEY}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # AI/ML Analytics Service
  ai-service:
    image: studentpass/ai-service:${VERSION:-latest}
    environment:
      PYTHON_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      CLICKHOUSE_URL: ${CLICKHOUSE_URL}
      REDIS_URL: redis://redis:6379
      MODEL_STORAGE_PATH: /models
      CUDA_VISIBLE_DEVICES: ${CUDA_VISIBLE_DEVICES:-}
    volumes:
      - ai-models:/models
      - ./ai/config:/app/config:ro
    depends_on:
      - postgres
      - clickhouse
      - redis
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  # IoT Device Management Service
  iot-service:
    image: studentpass/iot-service:${VERSION:-latest}
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      MQTT_BROKER_URL: ${MQTT_BROKER_URL}
      INFLUXDB_URL: ${INFLUXDB_URL}
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
      - influxdb
      - mqtt-broker
    restart: unless-stopped
    networks:
      - backend
      - iot
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Blockchain Service
  blockchain-service:
    image: studentpass/blockchain-service:${VERSION:-latest}
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      ETHEREUM_RPC_URL: ${ETHEREUM_RPC_URL}
      POLYGON_RPC_URL: ${POLYGON_RPC_URL}
      PRIVATE_KEY: ${BLOCKCHAIN_PRIVATE_KEY}
      CONTRACT_ADDRESS: ${CONTRACT_ADDRESS}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Analytics Service
  analytics-service:
    image: studentpass/analytics-service:${VERSION:-latest}
    environment:
      NODE_ENV: production
      CLICKHOUSE_URL: ${CLICKHOUSE_URL}
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL}
      REDIS_URL: redis://redis:6379
    depends_on:
      - clickhouse
      - elasticsearch
      - redis
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Mobile Service
  mobile-service:
    image: studentpass/mobile-service:${VERSION:-latest}
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY}
      APNS_KEY: ${APNS_KEY}
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Web Application
  web-app:
    image: studentpass/web-app:${VERSION:-latest}
    environment:
      NODE_ENV: production
      API_URL: https://api.studentpass.com
      CDN_URL: ${CDN_URL}
    restart: unless-stopped
    networks:
      - frontend
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Database - PostgreSQL Primary
  postgres:
    image: postgres:15.4-alpine
    environment:
      POSTGRES_DB: studentpass
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G

  # Database - PostgreSQL Replica (Read-only)
  postgres-replica:
    image: postgres:15.4-alpine
    environment:
      POSTGRES_DB: studentpass
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: postgres
      POSTGRES_MASTER_SERVICE: postgres
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
      - ./postgres/replica.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Document Database - MongoDB
  mongodb:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: studentpass
    volumes:
      - mongodb-data:/data/db
      - ./mongodb/mongod.conf:/etc/mongod.conf:ro
      - ./mongodb/init:/docker-entrypoint-initdb.d:ro
    command: mongod --config /etc/mongod.conf
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Cache - Redis Cluster
  redis:
    image: redis:7.2-alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Analytics Database - ClickHouse
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    environment:
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.xml:ro
      - ./clickhouse/users.xml:/etc/clickhouse-server/users.xml:ro
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  # Search Engine - Elasticsearch
  elasticsearch:
    image: elasticsearch:8.9.0
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms2g -Xmx2g
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      xpack.security.enabled: true
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Time Series Database - InfluxDB
  influxdb:
    image: influxdb:2.7-alpine
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: studentpass
      DOCKER_INFLUXDB_INIT_BUCKET: iot-metrics
    volumes:
      - influxdb-data:/var/lib/influxdb2
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Message Broker - MQTT
  mqtt-broker:
    image: eclipse-mosquitto:2.0
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - mqtt-data:/mosquitto/data
      - mqtt-logs:/mosquitto/log
    restart: unless-stopped
    networks:
      - backend
      - iot
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Message Queue - RabbitMQ
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - monitoring
      - backend

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - monitoring
      - frontend

  # Log Management - ELK Stack
  elasticsearch-logs:
    image: elasticsearch:8.9.0
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms1g -Xmx1g
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    volumes:
      - elasticsearch-logs-data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - logging

  logstash:
    image: logstash:8.9.0
    environment:
      LS_JAVA_OPTS: -Xmx1g -Xms1g
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs:/logs:ro
    depends_on:
      - elasticsearch-logs
    restart: unless-stopped
    networks:
      - logging

  kibana:
    image: kibana:8.9.0
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch-logs:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
    depends_on:
      - elasticsearch-logs
    restart: unless-stopped
    networks:
      - logging
      - frontend

  # Backup Service
  backup-service:
    image: studentpass/backup-service:${VERSION:-latest}
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      BACKUP_S3_BUCKET: ${BACKUP_S3_BUCKET}
      DATABASE_URL: ${DATABASE_URL}
      MONGO_URL: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - backup-temp:/tmp/backups
    depends_on:
      - postgres
      - mongodb
      - redis
    restart: unless-stopped
    networks:
      - backend

networks:
  frontend:
    driver: overlay
    attachable: true
  backend:
    driver: overlay
    internal: true
  iot:
    driver: overlay
  monitoring:
    driver: overlay
  logging:
    driver: overlay

volumes:
  # Database volumes
  postgres-data:
    driver: local
  postgres-replica-data:
    driver: local
  mongodb-data:
    driver: local
  redis-data:
    driver: local
  clickhouse-data:
    driver: local
  elasticsearch-data:
    driver: local
  influxdb-data:
    driver: local
  
  # Message broker volumes
  mqtt-data:
    driver: local
  mqtt-logs:
    driver: local
  rabbitmq-data:
    driver: local
  
  # AI/ML volumes
  ai-models:
    driver: local
  
  # Monitoring volumes
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  
  # Logging volumes
  elasticsearch-logs-data:
    driver: local
  
  # Backup volumes
  backup-temp:
    driver: local

# Health checks for all services
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

# Resource limits template
x-resource-defaults: &resource-defaults
  deploy:
    resources:
      limits:
        cpus: '1'
        memory: 1G
      reservations:
        cpus: '0.5'
        memory: 512M